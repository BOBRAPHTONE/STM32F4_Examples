
/Users/User/Desktop/STM32F4_Examples/01_Blinky/build/blinky.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <SysTick_Handler>:
extern void turnOnLED(uint32_t, int);
extern void turnOffLED(uint32_t, int);

volatile uint32_t msTicks;                      /* counts 1ms timeTicks       */
void SysTick_Handler(void) {
	msTicks++;
 8000188:	4b02      	ldr	r3, [pc, #8]	; (8000194 <SysTick_Handler+0xc>)
 800018a:	681a      	ldr	r2, [r3, #0]
 800018c:	3201      	adds	r2, #1
 800018e:	601a      	str	r2, [r3, #0]
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	20000024 	.word	0x20000024

08000198 <setSysTick>:
  while ((msTicks - curTicks) < dlyTicks);
}

void setSysTick(){
	// ---------- SysTick timer (1ms) -------- //
	if (SysTick_Config(SystemCoreClock / 1000)) {
 8000198:	4a0c      	ldr	r2, [pc, #48]	; (80001cc <setSysTick+0x34>)
 800019a:	4b0d      	ldr	r3, [pc, #52]	; (80001d0 <setSysTick+0x38>)
 800019c:	6812      	ldr	r2, [r2, #0]
 800019e:	fba3 1202 	umull	r1, r2, r3, r2
 80001a2:	0992      	lsrs	r2, r2, #6
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80001a4:	3a01      	subs	r2, #1
 80001a6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
  while ((msTicks - curTicks) < dlyTicks);
}

void setSysTick(){
 80001aa:	b410      	push	{r4}
 80001ac:	d20c      	bcs.n	80001c8 <setSysTick+0x30>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80001ae:	4b09      	ldr	r3, [pc, #36]	; (80001d4 <setSysTick+0x3c>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80001b0:	4809      	ldr	r0, [pc, #36]	; (80001d8 <setSysTick+0x40>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80001b2:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80001b4:	24f0      	movs	r4, #240	; 0xf0
 80001b6:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80001ba:	2100      	movs	r1, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001bc:	2207      	movs	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80001be:	6099      	str	r1, [r3, #8]
	// ---------- SysTick timer (1ms) -------- //
	if (SysTick_Config(SystemCoreClock / 1000)) {
		// Capture error
		while (1){};
	}
}
 80001c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	4770      	bx	lr
 80001c8:	e7fe      	b.n	80001c8 <setSysTick+0x30>
 80001ca:	bf00      	nop
 80001cc:	20000010 	.word	0x20000010
 80001d0:	10624dd3 	.word	0x10624dd3
 80001d4:	e000e010 	.word	0xe000e010
 80001d8:	e000ed00 	.word	0xe000ed00

080001dc <init_GPIO>:

void init_GPIO() {
 80001dc:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef  GPIO_InitStructure;

	// ---------- GPIO  for LEDS -------- //
	// GPIOD Periph clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80001de:	2008      	movs	r0, #8
		// Capture error
		while (1){};
	}
}

void init_GPIO() {
 80001e0:	b082      	sub	sp, #8
	GPIO_InitTypeDef  GPIO_InitStructure;

	// ---------- GPIO  for LEDS -------- //
	// GPIOD Periph clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80001e2:	2101      	movs	r1, #1
 80001e4:	f000 facc 	bl	8000780 <RCC_AHB1PeriphClockCmd>

	// Configure PD12, PD13, PD14 in output pushpull mode
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80001e8:	2501      	movs	r5, #1
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80001ea:	2400      	movs	r4, #0
	// ---------- GPIO  for LEDS -------- //
	// GPIOD Periph clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	// Configure PD12, PD13, PD14 in output pushpull mode
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
 80001ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 80001f0:	4669      	mov	r1, sp

	// Configure PD12, PD13, PD14 in output pushpull mode
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80001f2:	2603      	movs	r6, #3
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 80001f4:	480f      	ldr	r0, [pc, #60]	; (8000234 <init_GPIO+0x58>)
	// ---------- GPIO  for LEDS -------- //
	// GPIOD Periph clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	// Configure PD12, PD13, PD14 in output pushpull mode
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
 80001f6:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80001f8:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80001fc:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000200:	f88d 4007 	strb.w	r4, [sp, #7]

	// Configure PD12, PD13, PD14 in output pushpull mode
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000204:	f88d 6005 	strb.w	r6, [sp, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000208:	f000 fc5a 	bl	8000ac0 <GPIO_Init>


		// ---------- GPIO  for Push Button -------- //
	// GPIOD Periph clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800020c:	4628      	mov	r0, r5
 800020e:	4629      	mov	r1, r5
 8000210:	f000 fab6 	bl	8000780 <RCC_AHB1PeriphClockCmd>
	// Configure PD12, PD13, PD14 in output pushpull mode
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;	//PA0 is connected to high, so use pull down resistor
 8000214:	2302      	movs	r3, #2
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000216:	4669      	mov	r1, sp
 8000218:	4807      	ldr	r0, [pc, #28]	; (8000238 <init_GPIO+0x5c>)

	// Configure PD12, PD13, PD14 in output pushpull mode
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800021a:	f88d 6005 	strb.w	r6, [sp, #5]
		// ---------- GPIO  for Push Button -------- //
	// GPIOD Periph clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	// Configure PD12, PD13, PD14 in output pushpull mode
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 800021e:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000220:	f88d 4004 	strb.w	r4, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000224:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;	//PA0 is connected to high, so use pull down resistor
 8000228:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800022c:	f000 fc48 	bl	8000ac0 <GPIO_Init>
}
 8000230:	b002      	add	sp, #8
 8000232:	bd70      	pop	{r4, r5, r6, pc}
 8000234:	40020c00 	.word	0x40020c00
 8000238:	40020000 	.word	0x40020000

0800023c <Default_Handler>:
// This is the code that gets called when the processor receives an unexpected
// interrupt.	This simply enters an infinite loop, preserving the system state
// for examination by a debugger.
//
//*****************************************************************************
void Default_Handler(void) {
 800023c:	e7fe      	b.n	800023c <Default_Handler>
 800023e:	bf00      	nop

08000240 <Reset_Handler>:
* Input			:
* Output		:
* Return		:
*******************************************************************************/
void Reset_Handler(void)
{
 8000240:	4668      	mov	r0, sp
 8000242:	f020 0107 	bic.w	r1, r0, #7
 8000246:	468d      	mov	sp, r1
 8000248:	b519      	push	{r0, r3, r4, lr}
	//
	// Copy the data segment initializers from flash to SRAM in ROM mode
	//
#if (__RAM_MODE__==0)
	pulSrc = &__sidata;
	for(pulDest = &__data_start__; pulDest < &__data_end__; )
 800024a:	4913      	ldr	r1, [pc, #76]	; (8000298 <Reset_Handler+0x58>)
 800024c:	4b13      	ldr	r3, [pc, #76]	; (800029c <Reset_Handler+0x5c>)
 800024e:	4299      	cmp	r1, r3
 8000250:	d20b      	bcs.n	800026a <Reset_Handler+0x2a>
 8000252:	43c8      	mvns	r0, r1
 8000254:	4418      	add	r0, r3
 8000256:	f020 0003 	bic.w	r0, r0, #3
 800025a:	4c11      	ldr	r4, [pc, #68]	; (80002a0 <Reset_Handler+0x60>)
 800025c:	3004      	adds	r0, #4
 800025e:	2300      	movs	r3, #0
	{
		*(pulDest++) = *(pulSrc++);
 8000260:	58e2      	ldr	r2, [r4, r3]
 8000262:	50ca      	str	r2, [r1, r3]
 8000264:	3304      	adds	r3, #4
	//
	// Copy the data segment initializers from flash to SRAM in ROM mode
	//
#if (__RAM_MODE__==0)
	pulSrc = &__sidata;
	for(pulDest = &__data_start__; pulDest < &__data_end__; )
 8000266:	4283      	cmp	r3, r0
 8000268:	d1fa      	bne.n	8000260 <Reset_Handler+0x20>


	//
	// Zero fill the bss segment.
	//
	for(pulDest = &__bss_start__; pulDest < &__bss_end__; )
 800026a:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <Reset_Handler+0x64>)
 800026c:	4a0e      	ldr	r2, [pc, #56]	; (80002a8 <Reset_Handler+0x68>)
 800026e:	4293      	cmp	r3, r2
 8000270:	d20a      	bcs.n	8000288 <Reset_Handler+0x48>
 8000272:	43d9      	mvns	r1, r3
 8000274:	4411      	add	r1, r2
 8000276:	f021 0103 	bic.w	r1, r1, #3
 800027a:	4419      	add	r1, r3
	{
		*(pulDest++) = 0;
 800027c:	2200      	movs	r2, #0
 800027e:	3b04      	subs	r3, #4
 8000280:	f843 2f04 	str.w	r2, [r3, #4]!


	//
	// Zero fill the bss segment.
	//
	for(pulDest = &__bss_start__; pulDest < &__bss_end__; )
 8000284:	428b      	cmp	r3, r1
 8000286:	d1fb      	bne.n	8000280 <Reset_Handler+0x40>
	//
	//	Call IEC60335 CPU register tests POST
	//
//	__ASM volatile ("bl _CPUregTestPOST \t\n");

	SystemInit();
 8000288:	f000 f822 	bl	80002d0 <SystemInit>

	//
	// Call the application's entry point.
	//
	main();
 800028c:	f000 fccc 	bl	8000c28 <main>
}
 8000290:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
 8000294:	4685      	mov	sp, r0
 8000296:	4770      	bx	lr
 8000298:	20000000 	.word	0x20000000
 800029c:	20000024 	.word	0x20000024
 80002a0:	08000ca4 	.word	0x08000ca4
 80002a4:	20000024 	.word	0x20000024
 80002a8:	20000028 	.word	0x20000028

080002ac <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void NMI_Handler(void)
{
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void HardFault_Handler(void)
{
 80002b0:	e7fe      	b.n	80002b0 <HardFault_Handler>
 80002b2:	bf00      	nop
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void MemManage_Handler(void)
{
 80002b4:	e7fe      	b.n	80002b4 <HardFault_Handler+0x4>
 80002b6:	bf00      	nop
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void BusFault_Handler(void)
{
 80002b8:	e7fe      	b.n	80002b8 <HardFault_Handler+0x8>
 80002ba:	bf00      	nop
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void UsageFault_Handler(void)
{
 80002bc:	e7fe      	b.n	80002bc <HardFault_Handler+0xc>
 80002be:	bf00      	nop
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void SVC_Handler(void)
{
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void DebugMon_Handler(void)
{
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void PendSV_Handler(void)
{
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void SysTick_Handler(void)
{
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <SystemInit>:
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002d0:	4b35      	ldr	r3, [pc, #212]	; (80003a8 <SystemInit+0xd8>)

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80002d2:	4836      	ldr	r0, [pc, #216]	; (80003ac <SystemInit+0xdc>)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002d4:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80002d6:	2200      	movs	r2, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002d8:	f041 0101 	orr.w	r1, r1, #1
 80002dc:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80002de:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002e0:	6819      	ldr	r1, [r3, #0]
 80002e2:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80002e6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80002ea:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80002ec:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002ee:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002f0:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002f2:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80002f6:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80002f8:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80002fa:	9200      	str	r2, [sp, #0]
 80002fc:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000304:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000306:	461a      	mov	r2, r3
 8000308:	e003      	b.n	8000312 <SystemInit+0x42>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800030a:	9b00      	ldr	r3, [sp, #0]
 800030c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000310:	d009      	beq.n	8000326 <SystemInit+0x56>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000312:	6813      	ldr	r3, [r2, #0]
 8000314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000318:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 800031a:	9b00      	ldr	r3, [sp, #0]
 800031c:	3301      	adds	r3, #1
 800031e:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000320:	9b01      	ldr	r3, [sp, #4]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d0f1      	beq.n	800030a <SystemInit+0x3a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000326:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <SystemInit+0xd8>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 800032e:	bf18      	it	ne
 8000330:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000332:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000334:	9b01      	ldr	r3, [sp, #4]
 8000336:	2b01      	cmp	r3, #1
 8000338:	d005      	beq.n	8000346 <SystemInit+0x76>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800033a:	4b1d      	ldr	r3, [pc, #116]	; (80003b0 <SystemInit+0xe0>)
 800033c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000340:	609a      	str	r2, [r3, #8]
#endif
}
 8000342:	b002      	add	sp, #8
 8000344:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000346:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <SystemInit+0xd8>)
    PWR->CR |= PWR_CR_VOS;
 8000348:	4a1a      	ldr	r2, [pc, #104]	; (80003b4 <SystemInit+0xe4>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800034a:	6c18      	ldr	r0, [r3, #64]	; 0x40
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800034c:	491a      	ldr	r1, [pc, #104]	; (80003b8 <SystemInit+0xe8>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800034e:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000352:	6418      	str	r0, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000354:	6810      	ldr	r0, [r2, #0]
 8000356:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 800035a:	6010      	str	r0, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800035c:	689a      	ldr	r2, [r3, #8]
 800035e:	609a      	str	r2, [r3, #8]

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000360:	689a      	ldr	r2, [r3, #8]
 8000362:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000366:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000368:	689a      	ldr	r2, [r3, #8]
 800036a:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800036e:	609a      	str	r2, [r3, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000370:	6059      	str	r1, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000378:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800037a:	4619      	mov	r1, r3
 800037c:	680b      	ldr	r3, [r1, #0]
 800037e:	4a0a      	ldr	r2, [pc, #40]	; (80003a8 <SystemInit+0xd8>)
 8000380:	019b      	lsls	r3, r3, #6
 8000382:	d5fb      	bpl.n	800037c <SystemInit+0xac>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000384:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <SystemInit+0xec>)
 8000386:	f240 7105 	movw	r1, #1797	; 0x705
 800038a:	6019      	str	r1, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800038c:	6893      	ldr	r3, [r2, #8]
 800038e:	f023 0303 	bic.w	r3, r3, #3
 8000392:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000394:	6893      	ldr	r3, [r2, #8]
 8000396:	f043 0302 	orr.w	r3, r3, #2
 800039a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800039c:	6893      	ldr	r3, [r2, #8]
 800039e:	f003 030c 	and.w	r3, r3, #12
 80003a2:	2b08      	cmp	r3, #8
 80003a4:	d1fa      	bne.n	800039c <SystemInit+0xcc>
 80003a6:	e7c8      	b.n	800033a <SystemInit+0x6a>
 80003a8:	40023800 	.word	0x40023800
 80003ac:	24003010 	.word	0x24003010
 80003b0:	e000ed00 	.word	0xe000ed00
 80003b4:	40007000 	.word	0x40007000
 80003b8:	07405408 	.word	0x07405408
 80003bc:	40023c00 	.word	0x40023c00

080003c0 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003c0:	4b15      	ldr	r3, [pc, #84]	; (8000418 <SystemCoreClockUpdate+0x58>)
 80003c2:	689a      	ldr	r2, [r3, #8]
 80003c4:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 80003c8:	2a04      	cmp	r2, #4
 80003ca:	d023      	beq.n	8000414 <SystemCoreClockUpdate+0x54>
 80003cc:	2a08      	cmp	r2, #8
 80003ce:	d009      	beq.n	80003e4 <SystemCoreClockUpdate+0x24>
 80003d0:	4a12      	ldr	r2, [pc, #72]	; (800041c <SystemCoreClockUpdate+0x5c>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80003d2:	4911      	ldr	r1, [pc, #68]	; (8000418 <SystemCoreClockUpdate+0x58>)
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <SystemCoreClockUpdate+0x60>)
 80003d6:	6889      	ldr	r1, [r1, #8]
 80003d8:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80003dc:	5c59      	ldrb	r1, [r3, r1]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80003de:	40ca      	lsrs	r2, r1
 80003e0:	611a      	str	r2, [r3, #16]
 80003e2:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80003e4:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80003e6:	6859      	ldr	r1, [r3, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80003e8:	685b      	ldr	r3, [r3, #4]
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 80003ea:	0242      	lsls	r2, r0, #9
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80003ec:	bf4c      	ite	mi
 80003ee:	4a0d      	ldrmi	r2, [pc, #52]	; (8000424 <SystemCoreClockUpdate+0x64>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80003f0:	4a0a      	ldrpl	r2, [pc, #40]	; (800041c <SystemCoreClockUpdate+0x5c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80003f2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80003f6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80003fa:	fbb2 f2f1 	udiv	r2, r2, r1
 80003fe:	fb02 f203 	mul.w	r2, r2, r3
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <SystemCoreClockUpdate+0x58>)
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800040a:	3301      	adds	r3, #1
 800040c:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 800040e:	fbb2 f2f3 	udiv	r2, r2, r3
      break;
 8000412:	e7de      	b.n	80003d2 <SystemCoreClockUpdate+0x12>
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 8000414:	4a03      	ldr	r2, [pc, #12]	; (8000424 <SystemCoreClockUpdate+0x64>)
 8000416:	e7dc      	b.n	80003d2 <SystemCoreClockUpdate+0x12>
 8000418:	40023800 	.word	0x40023800
 800041c:	00f42400 	.word	0x00f42400
 8000420:	20000000 	.word	0x20000000
 8000424:	007a1200 	.word	0x007a1200

08000428 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <RCC_DeInit+0x40>)

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 800042a:	4810      	ldr	r0, [pc, #64]	; (800046c <RCC_DeInit+0x44>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800042c:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800042e:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000430:	f041 0101 	orr.w	r1, r1, #1
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000434:	b430      	push	{r4, r5}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000436:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000438:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800043a:	6819      	ldr	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800043c:	4d0c      	ldr	r5, [pc, #48]	; (8000470 <RCC_DeInit+0x48>)

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800043e:	4c0d      	ldr	r4, [pc, #52]	; (8000474 <RCC_DeInit+0x4c>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000440:	f021 51a8 	bic.w	r1, r1, #352321536	; 0x15000000
 8000444:	f421 2110 	bic.w	r1, r1, #589824	; 0x90000
 8000448:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800044a:	605d      	str	r5, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800044c:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000450:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000454:	6819      	ldr	r1, [r3, #0]
 8000456:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800045a:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 

}
 800045c:	bc30      	pop	{r4, r5}
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800045e:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 
 8000460:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

}
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40023800 	.word	0x40023800
 800046c:	24003000 	.word	0x24003000
 8000470:	24003010 	.word	0x24003010
 8000474:	20003000 	.word	0x20003000

08000478 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8000478:	4b02      	ldr	r3, [pc, #8]	; (8000484 <RCC_HSEConfig+0xc>)
 800047a:	2200      	movs	r2, #0
 800047c:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 800047e:	7018      	strb	r0, [r3, #0]
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40023802 	.word	0x40023802

08000488 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000488:	b082      	sub	sp, #8
  __IO uint32_t startupcounter = 0;
 800048a:	2300      	movs	r3, #0

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800048c:	4a0b      	ldr	r2, [pc, #44]	; (80004bc <RCC_WaitForHSEStartUp+0x34>)
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 800048e:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000490:	6813      	ldr	r3, [r2, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000492:	039b      	lsls	r3, r3, #14
 8000494:	d40c      	bmi.n	80004b0 <RCC_WaitForHSEStartUp+0x28>
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8000496:	9b01      	ldr	r3, [sp, #4]
 8000498:	3301      	adds	r3, #1
 800049a:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800049c:	9b01      	ldr	r3, [sp, #4]
 800049e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80004a2:	d1f5      	bne.n	8000490 <RCC_WaitForHSEStartUp+0x8>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80004a4:	4b05      	ldr	r3, [pc, #20]	; (80004bc <RCC_WaitForHSEStartUp+0x34>)
 80004a6:	6818      	ldr	r0, [r3, #0]
  }
  else
  {
    status = ERROR;
  }
  return (status);
 80004a8:	f3c0 4040 	ubfx	r0, r0, #17, #1
}
 80004ac:	b002      	add	sp, #8
 80004ae:	4770      	bx	lr
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 80004b0:	9b01      	ldr	r3, [sp, #4]
 80004b2:	3301      	adds	r3, #1
 80004b4:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 80004b6:	9b01      	ldr	r3, [sp, #4]
 80004b8:	e7f4      	b.n	80004a4 <RCC_WaitForHSEStartUp+0x1c>
 80004ba:	bf00      	nop
 80004bc:	40023800 	.word	0x40023800

080004c0 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 80004c0:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <RCC_AdjustHSICalibrationValue+0x10>)
 80004c2:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80004c4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80004c8:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 80004cc:	6018      	str	r0, [r3, #0]
 80004ce:	4770      	bx	lr
 80004d0:	40023800 	.word	0x40023800

080004d4 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80004d4:	4b01      	ldr	r3, [pc, #4]	; (80004dc <RCC_HSICmd+0x8>)
 80004d6:	6018      	str	r0, [r3, #0]
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	42470000 	.word	0x42470000

080004e0 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <RCC_LSEConfig+0x1c>)
 80004e2:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80004e4:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80004e6:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80004e8:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80004ea:	d005      	beq.n	80004f8 <RCC_LSEConfig+0x18>
 80004ec:	2804      	cmp	r0, #4
 80004ee:	d102      	bne.n	80004f6 <RCC_LSEConfig+0x16>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80004f0:	2205      	movs	r2, #5
 80004f2:	701a      	strb	r2, [r3, #0]
 80004f4:	4770      	bx	lr
 80004f6:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80004f8:	7018      	strb	r0, [r3, #0]
      break;
 80004fa:	4770      	bx	lr
 80004fc:	40023870 	.word	0x40023870

08000500 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000500:	4b01      	ldr	r3, [pc, #4]	; (8000508 <RCC_LSICmd+0x8>)
 8000502:	6018      	str	r0, [r3, #0]
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	42470e80 	.word	0x42470e80

0800050c <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 800050c:	b430      	push	{r4, r5}
 800050e:	9c02      	ldr	r4, [sp, #8]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000510:	4d06      	ldr	r5, [pc, #24]	; (800052c <RCC_PLLConfig+0x20>)
 8000512:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 8000516:	085b      	lsrs	r3, r3, #1
 8000518:	4301      	orrs	r1, r0
 800051a:	3b01      	subs	r3, #1
 800051c:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8000520:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000524:	606b      	str	r3, [r5, #4]
                 (PLLQ << 24);
}
 8000526:	bc30      	pop	{r4, r5}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40023800 	.word	0x40023800

08000530 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000530:	4b01      	ldr	r3, [pc, #4]	; (8000538 <RCC_PLLCmd+0x8>)
 8000532:	6018      	str	r0, [r3, #0]
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	42470060 	.word	0x42470060

0800053c <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 800053c:	0709      	lsls	r1, r1, #28
 800053e:	4b03      	ldr	r3, [pc, #12]	; (800054c <RCC_PLLI2SConfig+0x10>)
 8000540:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8000544:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40023800 	.word	0x40023800

08000550 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8000550:	4b01      	ldr	r3, [pc, #4]	; (8000558 <RCC_PLLI2SCmd+0x8>)
 8000552:	6018      	str	r0, [r3, #0]
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	42470068 	.word	0x42470068

0800055c <RCC_PLLSAIConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 800055c:	0712      	lsls	r2, r2, #28
 800055e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8000562:	4b03      	ldr	r3, [pc, #12]	; (8000570 <RCC_PLLSAIConfig+0x14>)
 8000564:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8000568:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40023800 	.word	0x40023800

08000574 <RCC_PLLSAICmd>:
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 8000574:	4b01      	ldr	r3, [pc, #4]	; (800057c <RCC_PLLSAICmd+0x8>)
 8000576:	6018      	str	r0, [r3, #0]
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	42470070 	.word	0x42470070

08000580 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000580:	4b01      	ldr	r3, [pc, #4]	; (8000588 <RCC_ClockSecuritySystemCmd+0x8>)
 8000582:	6018      	str	r0, [r3, #0]
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	4247004c 	.word	0x4247004c

0800058c <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <RCC_MCO1Config+0x10>)
 800058e:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8000590:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8000594:	4311      	orrs	r1, r2
 8000596:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000598:	6098      	str	r0, [r3, #8]
 800059a:	4770      	bx	lr
 800059c:	40023800 	.word	0x40023800

080005a0 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <RCC_MCO2Config+0x10>)
 80005a2:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 80005a4:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 80005a8:	4311      	orrs	r1, r2
 80005aa:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80005ac:	6098      	str	r0, [r3, #8]
 80005ae:	4770      	bx	lr
 80005b0:	40023800 	.word	0x40023800

080005b4 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <RCC_SYSCLKConfig+0x10>)
 80005b6:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80005b8:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80005bc:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80005be:	6098      	str	r0, [r3, #8]
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40023800 	.word	0x40023800

080005c8 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 80005c8:	4b02      	ldr	r3, [pc, #8]	; (80005d4 <RCC_GetSYSCLKSource+0xc>)
 80005ca:	6898      	ldr	r0, [r3, #8]
}
 80005cc:	f000 000c 	and.w	r0, r0, #12
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800

080005d8 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <RCC_HCLKConfig+0x10>)
 80005da:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80005dc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80005e0:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80005e2:	6098      	str	r0, [r3, #8]
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800

080005ec <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80005ec:	4b03      	ldr	r3, [pc, #12]	; (80005fc <RCC_PCLK1Config+0x10>)
 80005ee:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80005f0:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80005f4:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80005f6:	6098      	str	r0, [r3, #8]
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800

08000600 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <RCC_PCLK2Config+0x10>)
 8000602:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000604:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000608:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800060c:	6098      	str	r0, [r3, #8]
 800060e:	4770      	bx	lr
 8000610:	40023800 	.word	0x40023800

08000614 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000614:	4a1f      	ldr	r2, [pc, #124]	; (8000694 <RCC_GetClocksFreq+0x80>)
 8000616:	6893      	ldr	r3, [r2, #8]
 8000618:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 800061c:	2b04      	cmp	r3, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800061e:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8000620:	d01b      	beq.n	800065a <RCC_GetClocksFreq+0x46>
 8000622:	2b08      	cmp	r3, #8
 8000624:	d01c      	beq.n	8000660 <RCC_GetClocksFreq+0x4c>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000626:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <RCC_GetClocksFreq+0x84>)
 8000628:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800062a:	491a      	ldr	r1, [pc, #104]	; (8000694 <RCC_GetClocksFreq+0x80>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 800062c:	4a1b      	ldr	r2, [pc, #108]	; (800069c <RCC_GetClocksFreq+0x88>)
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800062e:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 4;
 8000630:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000634:	5d14      	ldrb	r4, [r2, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000636:	40e3      	lsrs	r3, r4
 8000638:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800063a:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 800063c:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8000640:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000642:	fa23 f404 	lsr.w	r4, r3, r4
 8000646:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000648:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
  presc = APBAHBPrescTable[tmp];
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
}
 800064a:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
  tmp = tmp >> 13;
 800064e:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 8000652:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000654:	40d3      	lsrs	r3, r2
 8000656:	60c3      	str	r3, [r0, #12]
}
 8000658:	4770      	bx	lr
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <RCC_GetClocksFreq+0x8c>)
 800065c:	6003      	str	r3, [r0, #0]
      break;
 800065e:	e7e4      	b.n	800062a <RCC_GetClocksFreq+0x16>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000660:	6854      	ldr	r4, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000662:	6851      	ldr	r1, [r2, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000664:	6852      	ldr	r2, [r2, #4]
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 8000666:	0263      	lsls	r3, r4, #9
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000668:	bf4c      	ite	mi
 800066a:	4b0d      	ldrmi	r3, [pc, #52]	; (80006a0 <RCC_GetClocksFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800066c:	4b0a      	ldrpl	r3, [pc, #40]	; (8000698 <RCC_GetClocksFreq+0x84>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800066e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000672:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8000676:	fbb3 f3f1 	udiv	r3, r3, r1
 800067a:	fb03 f302 	mul.w	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800067e:	4a05      	ldr	r2, [pc, #20]	; (8000694 <RCC_GetClocksFreq+0x80>)
 8000680:	6852      	ldr	r2, [r2, #4]
 8000682:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8000686:	3201      	adds	r2, #1
 8000688:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800068a:	fbb3 f3f2 	udiv	r3, r3, r2
 800068e:	6003      	str	r3, [r0, #0]
      break;
 8000690:	e7cb      	b.n	800062a <RCC_GetClocksFreq+0x16>
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	00f42400 	.word	0x00f42400
 800069c:	20000014 	.word	0x20000014
 80006a0:	007a1200 	.word	0x007a1200

080006a4 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 80006a4:	f400 7340 	and.w	r3, r0, #768	; 0x300
 80006a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80006ac:	d109      	bne.n	80006c2 <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 80006ae:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <RCC_RTCCLKConfig+0x2c>)
 80006b0:	6891      	ldr	r1, [r2, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 80006b2:	f020 4370 	bic.w	r3, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 80006b6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 80006ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006be:	430b      	orrs	r3, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 80006c0:	6093      	str	r3, [r2, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 80006c2:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <RCC_RTCCLKConfig+0x2c>)
 80006c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80006c6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80006ca:	4310      	orrs	r0, r2
 80006cc:	6718      	str	r0, [r3, #112]	; 0x70
 80006ce:	4770      	bx	lr
 80006d0:	40023800 	.word	0x40023800

080006d4 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80006d4:	4b01      	ldr	r3, [pc, #4]	; (80006dc <RCC_RTCCLKCmd+0x8>)
 80006d6:	6018      	str	r0, [r3, #0]
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	42470e3c 	.word	0x42470e3c

080006e0 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 80006e0:	4b01      	ldr	r3, [pc, #4]	; (80006e8 <RCC_BackupResetCmd+0x8>)
 80006e2:	6018      	str	r0, [r3, #0]
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	42470e40 	.word	0x42470e40

080006ec <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 80006ec:	4b01      	ldr	r3, [pc, #4]	; (80006f4 <RCC_I2SCLKConfig+0x8>)
 80006ee:	6018      	str	r0, [r3, #0]
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	4247015c 	.word	0x4247015c

080006f8 <RCC_SAIPLLI2SClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <RCC_SAIPLLI2SClkDivConfig+0x14>)
 80006fa:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 80006fe:	3801      	subs	r0, #1
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 8000700:	f022 021f 	bic.w	r2, r2, #31

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8000704:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000706:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800070a:	4770      	bx	lr
 800070c:	40023800 	.word	0x40023800

08000710 <RCC_SAIPLLSAIClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <RCC_SAIPLLSAIClkDivConfig+0x18>)
 8000712:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8000716:	3801      	subs	r0, #1
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 8000718:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 800071c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000720:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <RCC_SAIBlockACLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <RCC_SAIBlockACLKConfig+0x14>)
 800072e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 8000732:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 8000736:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000738:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800

08000744 <RCC_SAIBlockBCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <RCC_SAIBlockBCLKConfig+0x14>)
 8000746:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 800074a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 800074e:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000750:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800

0800075c <RCC_LTDCCLKDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <RCC_LTDCCLKDivConfig+0x14>)
 800075e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 8000762:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 8000766:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000768:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800

08000774 <RCC_TIMCLKPresConfig>:
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 8000774:	4b01      	ldr	r3, [pc, #4]	; (800077c <RCC_TIMCLKPresConfig+0x8>)
 8000776:	6018      	str	r0, [r3, #0]
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	424711e0 	.word	0x424711e0

08000780 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <RCC_AHB1PeriphClockCmd+0x14>)
 8000782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000784:	b919      	cbnz	r1, 800078e <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000786:	ea22 0000 	bic.w	r0, r2, r0
 800078a:	6318      	str	r0, [r3, #48]	; 0x30
 800078c:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800078e:	4310      	orrs	r0, r2
 8000790:	6318      	str	r0, [r3, #48]	; 0x30
 8000792:	4770      	bx	lr
 8000794:	40023800 	.word	0x40023800

08000798 <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <RCC_AHB2PeriphClockCmd+0x14>)
 800079a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800079c:	b919      	cbnz	r1, 80007a6 <RCC_AHB2PeriphClockCmd+0xe>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800079e:	ea22 0000 	bic.w	r0, r2, r0
 80007a2:	6358      	str	r0, [r3, #52]	; 0x34
 80007a4:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 80007a6:	4310      	orrs	r0, r2
 80007a8:	6358      	str	r0, [r3, #52]	; 0x34
 80007aa:	4770      	bx	lr
 80007ac:	40023800 	.word	0x40023800

080007b0 <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <RCC_AHB3PeriphClockCmd+0x14>)
 80007b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007b4:	b919      	cbnz	r1, 80007be <RCC_AHB3PeriphClockCmd+0xe>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 80007b6:	ea22 0000 	bic.w	r0, r2, r0
 80007ba:	6398      	str	r0, [r3, #56]	; 0x38
 80007bc:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80007be:	4310      	orrs	r0, r2
 80007c0:	6398      	str	r0, [r3, #56]	; 0x38
 80007c2:	4770      	bx	lr
 80007c4:	40023800 	.word	0x40023800

080007c8 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <RCC_APB1PeriphClockCmd+0x14>)
 80007ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007cc:	b919      	cbnz	r1, 80007d6 <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80007ce:	ea22 0000 	bic.w	r0, r2, r0
 80007d2:	6418      	str	r0, [r3, #64]	; 0x40
 80007d4:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80007d6:	4310      	orrs	r0, r2
 80007d8:	6418      	str	r0, [r3, #64]	; 0x40
 80007da:	4770      	bx	lr
 80007dc:	40023800 	.word	0x40023800

080007e0 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <RCC_APB2PeriphClockCmd+0x14>)
 80007e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007e4:	b919      	cbnz	r1, 80007ee <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80007e6:	ea22 0000 	bic.w	r0, r2, r0
 80007ea:	6458      	str	r0, [r3, #68]	; 0x44
 80007ec:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80007ee:	4310      	orrs	r0, r2
 80007f0:	6458      	str	r0, [r3, #68]	; 0x44
 80007f2:	4770      	bx	lr
 80007f4:	40023800 	.word	0x40023800

080007f8 <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <RCC_AHB1PeriphResetCmd+0x14>)
 80007fa:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007fc:	b919      	cbnz	r1, 8000806 <RCC_AHB1PeriphResetCmd+0xe>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 80007fe:	ea22 0000 	bic.w	r0, r2, r0
 8000802:	6118      	str	r0, [r3, #16]
 8000804:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000806:	4310      	orrs	r0, r2
 8000808:	6118      	str	r0, [r3, #16]
 800080a:	4770      	bx	lr
 800080c:	40023800 	.word	0x40023800

08000810 <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <RCC_AHB2PeriphResetCmd+0x14>)
 8000812:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000814:	b919      	cbnz	r1, 800081e <RCC_AHB2PeriphResetCmd+0xe>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8000816:	ea22 0000 	bic.w	r0, r2, r0
 800081a:	6158      	str	r0, [r3, #20]
 800081c:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 800081e:	4310      	orrs	r0, r2
 8000820:	6158      	str	r0, [r3, #20]
 8000822:	4770      	bx	lr
 8000824:	40023800 	.word	0x40023800

08000828 <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <RCC_AHB3PeriphResetCmd+0x14>)
 800082a:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800082c:	b919      	cbnz	r1, 8000836 <RCC_AHB3PeriphResetCmd+0xe>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 800082e:	ea22 0000 	bic.w	r0, r2, r0
 8000832:	6198      	str	r0, [r3, #24]
 8000834:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000836:	4310      	orrs	r0, r2
 8000838:	6198      	str	r0, [r3, #24]
 800083a:	4770      	bx	lr
 800083c:	40023800 	.word	0x40023800

08000840 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <RCC_APB1PeriphResetCmd+0x14>)
 8000842:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000844:	b919      	cbnz	r1, 800084e <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000846:	ea22 0000 	bic.w	r0, r2, r0
 800084a:	6218      	str	r0, [r3, #32]
 800084c:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800084e:	4310      	orrs	r0, r2
 8000850:	6218      	str	r0, [r3, #32]
 8000852:	4770      	bx	lr
 8000854:	40023800 	.word	0x40023800

08000858 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <RCC_APB2PeriphResetCmd+0x14>)
 800085a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800085c:	b919      	cbnz	r1, 8000866 <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800085e:	ea22 0000 	bic.w	r0, r2, r0
 8000862:	6258      	str	r0, [r3, #36]	; 0x24
 8000864:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000866:	4310      	orrs	r0, r2
 8000868:	6258      	str	r0, [r3, #36]	; 0x24
 800086a:	4770      	bx	lr
 800086c:	40023800 	.word	0x40023800

08000870 <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
 8000872:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000874:	b919      	cbnz	r1, 800087e <RCC_AHB1PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8000876:	ea22 0000 	bic.w	r0, r2, r0
 800087a:	6518      	str	r0, [r3, #80]	; 0x50
 800087c:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800087e:	4310      	orrs	r0, r2
 8000880:	6518      	str	r0, [r3, #80]	; 0x50
 8000882:	4770      	bx	lr
 8000884:	40023800 	.word	0x40023800

08000888 <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000888:	4b04      	ldr	r3, [pc, #16]	; (800089c <RCC_AHB2PeriphClockLPModeCmd+0x14>)
 800088a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800088c:	b919      	cbnz	r1, 8000896 <RCC_AHB2PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 800088e:	ea22 0000 	bic.w	r0, r2, r0
 8000892:	6558      	str	r0, [r3, #84]	; 0x54
 8000894:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000896:	4310      	orrs	r0, r2
 8000898:	6558      	str	r0, [r3, #84]	; 0x54
 800089a:	4770      	bx	lr
 800089c:	40023800 	.word	0x40023800

080008a0 <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
 80008a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008a4:	b919      	cbnz	r1, 80008ae <RCC_AHB3PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 80008a6:	ea22 0000 	bic.w	r0, r2, r0
 80008aa:	6598      	str	r0, [r3, #88]	; 0x58
 80008ac:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 80008ae:	4310      	orrs	r0, r2
 80008b0:	6598      	str	r0, [r3, #88]	; 0x58
 80008b2:	4770      	bx	lr
 80008b4:	40023800 	.word	0x40023800

080008b8 <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <RCC_APB1PeriphClockLPModeCmd+0x14>)
 80008ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008bc:	b919      	cbnz	r1, 80008c6 <RCC_APB1PeriphClockLPModeCmd+0xe>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 80008be:	ea22 0000 	bic.w	r0, r2, r0
 80008c2:	6618      	str	r0, [r3, #96]	; 0x60
 80008c4:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 80008c6:	4310      	orrs	r0, r2
 80008c8:	6618      	str	r0, [r3, #96]	; 0x60
 80008ca:	4770      	bx	lr
 80008cc:	40023800 	.word	0x40023800

080008d0 <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <RCC_APB2PeriphClockLPModeCmd+0x14>)
 80008d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008d4:	b919      	cbnz	r1, 80008de <RCC_APB2PeriphClockLPModeCmd+0xe>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 80008d6:	ea22 0000 	bic.w	r0, r2, r0
 80008da:	6658      	str	r0, [r3, #100]	; 0x64
 80008dc:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80008de:	4310      	orrs	r0, r2
 80008e0:	6658      	str	r0, [r3, #100]	; 0x64
 80008e2:	4770      	bx	lr
 80008e4:	40023800 	.word	0x40023800

080008e8 <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <RCC_ITConfig+0x14>)
 80008ea:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008ec:	b919      	cbnz	r1, 80008f6 <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80008ee:	ea22 0000 	bic.w	r0, r2, r0
 80008f2:	7018      	strb	r0, [r3, #0]
 80008f4:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80008f6:	4310      	orrs	r0, r2
 80008f8:	7018      	strb	r0, [r3, #0]
 80008fa:	4770      	bx	lr
 80008fc:	4002380d 	.word	0x4002380d

08000900 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000900:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8000902:	2b01      	cmp	r3, #1
 8000904:	d00b      	beq.n	800091e <RCC_GetFlagStatus+0x1e>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000906:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <RCC_GetFlagStatus+0x30>)
 800090a:	bf0c      	ite	eq
 800090c:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800090e:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000910:	f000 001f 	and.w	r0, r0, #31
 8000914:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8000918:	f000 0001 	and.w	r0, r0, #1
 800091c:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <RCC_GetFlagStatus+0x30>)
 8000920:	681b      	ldr	r3, [r3, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000922:	f000 001f 	and.w	r0, r0, #31
 8000926:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 800092a:	f000 0001 	and.w	r0, r0, #1
 800092e:	4770      	bx	lr
 8000930:	40023800 	.word	0x40023800

08000934 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000934:	4b02      	ldr	r3, [pc, #8]	; (8000940 <RCC_ClearFlag+0xc>)
 8000936:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000938:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800093c:	675a      	str	r2, [r3, #116]	; 0x74
 800093e:	4770      	bx	lr
 8000940:	40023800 	.word	0x40023800

08000944 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000944:	4b03      	ldr	r3, [pc, #12]	; (8000954 <RCC_GetITStatus+0x10>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 800094a:	bf0c      	ite	eq
 800094c:	2000      	moveq	r0, #0
 800094e:	2001      	movne	r0, #1
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800

08000958 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000958:	4b01      	ldr	r3, [pc, #4]	; (8000960 <RCC_ClearITPendingBit+0x8>)
 800095a:	7018      	strb	r0, [r3, #0]
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	4002380e 	.word	0x4002380e

08000964 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000964:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8000966:	4b4b      	ldr	r3, [pc, #300]	; (8000a94 <GPIO_DeInit+0x130>)
 8000968:	4298      	cmp	r0, r3
 800096a:	d02a      	beq.n	80009c2 <GPIO_DeInit+0x5e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 800096c:	4b4a      	ldr	r3, [pc, #296]	; (8000a98 <GPIO_DeInit+0x134>)
 800096e:	4298      	cmp	r0, r3
 8000970:	d031      	beq.n	80009d6 <GPIO_DeInit+0x72>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8000972:	4b4a      	ldr	r3, [pc, #296]	; (8000a9c <GPIO_DeInit+0x138>)
 8000974:	4298      	cmp	r0, r3
 8000976:	d038      	beq.n	80009ea <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8000978:	4b49      	ldr	r3, [pc, #292]	; (8000aa0 <GPIO_DeInit+0x13c>)
 800097a:	4298      	cmp	r0, r3
 800097c:	d03f      	beq.n	80009fe <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 800097e:	4b49      	ldr	r3, [pc, #292]	; (8000aa4 <GPIO_DeInit+0x140>)
 8000980:	4298      	cmp	r0, r3
 8000982:	d046      	beq.n	8000a12 <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 8000984:	4b48      	ldr	r3, [pc, #288]	; (8000aa8 <GPIO_DeInit+0x144>)
 8000986:	4298      	cmp	r0, r3
 8000988:	d04d      	beq.n	8000a26 <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 800098a:	4b48      	ldr	r3, [pc, #288]	; (8000aac <GPIO_DeInit+0x148>)
 800098c:	4298      	cmp	r0, r3
 800098e:	d054      	beq.n	8000a3a <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 8000990:	4b47      	ldr	r3, [pc, #284]	; (8000ab0 <GPIO_DeInit+0x14c>)
 8000992:	4298      	cmp	r0, r3
 8000994:	d05b      	beq.n	8000a4e <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }

  else if (GPIOx == GPIOI)
 8000996:	4b47      	ldr	r3, [pc, #284]	; (8000ab4 <GPIO_DeInit+0x150>)
 8000998:	4298      	cmp	r0, r3
 800099a:	d062      	beq.n	8000a62 <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
 800099c:	4b46      	ldr	r3, [pc, #280]	; (8000ab8 <GPIO_DeInit+0x154>)
 800099e:	4298      	cmp	r0, r3
 80009a0:	d06b      	beq.n	8000a7a <GPIO_DeInit+0x116>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOK)
 80009a2:	4b46      	ldr	r3, [pc, #280]	; (8000abc <GPIO_DeInit+0x158>)
 80009a4:	4298      	cmp	r0, r3
 80009a6:	d000      	beq.n	80009aa <GPIO_DeInit+0x46>
 80009a8:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 80009aa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80009ae:	2101      	movs	r1, #1
 80009b0:	f7ff ff22 	bl	80007f8 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 80009b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80009b8:	2100      	movs	r1, #0
    }
  }
}
 80009ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOK)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 80009be:	f7ff bf1b 	b.w	80007f8 <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80009c2:	2001      	movs	r0, #1
 80009c4:	4601      	mov	r1, r0
 80009c6:	f7ff ff17 	bl	80007f8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80009ca:	2001      	movs	r0, #1
 80009cc:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80009ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80009d2:	f7ff bf11 	b.w	80007f8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80009d6:	2002      	movs	r0, #2
 80009d8:	2101      	movs	r1, #1
 80009da:	f7ff ff0d 	bl	80007f8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80009de:	2002      	movs	r0, #2
 80009e0:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80009e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80009e6:	f7ff bf07 	b.w	80007f8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80009ea:	2004      	movs	r0, #4
 80009ec:	2101      	movs	r1, #1
 80009ee:	f7ff ff03 	bl	80007f8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80009f2:	2004      	movs	r0, #4
 80009f4:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80009f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80009fa:	f7ff befd 	b.w	80007f8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80009fe:	2008      	movs	r0, #8
 8000a00:	2101      	movs	r1, #1
 8000a02:	f7ff fef9 	bl	80007f8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8000a06:	2008      	movs	r0, #8
 8000a08:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000a0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8000a0e:	f7ff bef3 	b.w	80007f8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000a12:	2010      	movs	r0, #16
 8000a14:	2101      	movs	r1, #1
 8000a16:	f7ff feef 	bl	80007f8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000a1a:	2010      	movs	r0, #16
 8000a1c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000a1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000a22:	f7ff bee9 	b.w	80007f8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000a26:	2020      	movs	r0, #32
 8000a28:	2101      	movs	r1, #1
 8000a2a:	f7ff fee5 	bl	80007f8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8000a2e:	2020      	movs	r0, #32
 8000a30:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000a32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8000a36:	f7ff bedf 	b.w	80007f8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000a3a:	2040      	movs	r0, #64	; 0x40
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	f7ff fedb 	bl	80007f8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000a42:	2040      	movs	r0, #64	; 0x40
 8000a44:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000a46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000a4a:	f7ff bed5 	b.w	80007f8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8000a4e:	2080      	movs	r0, #128	; 0x80
 8000a50:	2101      	movs	r1, #1
 8000a52:	f7ff fed1 	bl	80007f8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000a56:	2080      	movs	r0, #128	; 0x80
 8000a58:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000a5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000a5e:	f7ff becb 	b.w	80007f8 <RCC_AHB1PeriphResetCmd>
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000a62:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a66:	2101      	movs	r1, #1
 8000a68:	f7ff fec6 	bl	80007f8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000a6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a70:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000a72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000a76:	f7ff bebf 	b.w	80007f8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 8000a7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a7e:	2101      	movs	r1, #1
 8000a80:	f7ff feba 	bl	80007f8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 8000a84:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a88:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000a8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 8000a8e:	f7ff beb3 	b.w	80007f8 <RCC_AHB1PeriphResetCmd>
 8000a92:	bf00      	nop
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020c00 	.word	0x40020c00
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40021400 	.word	0x40021400
 8000aac:	40021800 	.word	0x40021800
 8000ab0:	40021c00 	.word	0x40021c00
 8000ab4:	40022000 	.word	0x40022000
 8000ab8:	40022400 	.word	0x40022400
 8000abc:	40022800 	.word	0x40022800

08000ac0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	680e      	ldr	r6, [r1, #0]
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000aca:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000acc:	f04f 0803 	mov.w	r8, #3
 8000ad0:	e004      	b.n	8000adc <GPIO_Init+0x1c>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	2b10      	cmp	r3, #16
 8000ad6:	f102 0202 	add.w	r2, r2, #2
 8000ada:	d02e      	beq.n	8000b3a <GPIO_Init+0x7a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000adc:	fa07 f403 	lsl.w	r4, r7, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000ae0:	ea04 0506 	and.w	r5, r4, r6

    if (currentpin == pos)
 8000ae4:	42a5      	cmp	r5, r4
 8000ae6:	d1f4      	bne.n	8000ad2 <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000ae8:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000aec:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000af0:	fa08 f402 	lsl.w	r4, r8, r2
 8000af4:	43e4      	mvns	r4, r4
 8000af6:	ea04 0909 	and.w	r9, r4, r9
 8000afa:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000afe:	f8d0 9000 	ldr.w	r9, [r0]
 8000b02:	fa0c fa02 	lsl.w	sl, ip, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000b06:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8000b0a:	fa5f fc8c 	uxtb.w	ip, ip
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000b0e:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000b12:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000b16:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000b1a:	d911      	bls.n	8000b40 <GPIO_Init+0x80>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000b1c:	68c5      	ldr	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000b1e:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000b22:	402c      	ands	r4, r5
 8000b24:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000b26:	68c5      	ldr	r5, [r0, #12]
 8000b28:	fa0c f402 	lsl.w	r4, ip, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b2c:	3301      	adds	r3, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000b2e:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b30:	2b10      	cmp	r3, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000b32:	60c4      	str	r4, [r0, #12]
 8000b34:	f102 0202 	add.w	r2, r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b38:	d1d0      	bne.n	8000adc <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000b3a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8000b3e:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000b40:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000b44:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000b48:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000b4c:	ea04 0a0a 	and.w	sl, r4, sl
 8000b50:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000b54:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8000b58:	fa09 f902 	lsl.w	r9, r9, r2
 8000b5c:	ea49 090a 	orr.w	r9, r9, sl
 8000b60:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000b64:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8000b68:	ea29 0505 	bic.w	r5, r9, r5
 8000b6c:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000b6e:	6845      	ldr	r5, [r0, #4]
 8000b70:	fa0c fc03 	lsl.w	ip, ip, r3
 8000b74:	fa1f fc8c 	uxth.w	ip, ip
 8000b78:	ea4c 0505 	orr.w	r5, ip, r5
 8000b7c:	6045      	str	r5, [r0, #4]
 8000b7e:	e7cd      	b.n	8000b1c <GPIO_Init+0x5c>

08000b80 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000b80:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b86:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000b88:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000b8a:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000b8c:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000b8e:	71c3      	strb	r3, [r0, #7]
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b94:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8000b96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b9a:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000b9c:	9b01      	ldr	r3, [sp, #4]
 8000b9e:	430b      	orrs	r3, r1
 8000ba0:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000ba2:	9b01      	ldr	r3, [sp, #4]
 8000ba4:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000ba6:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000ba8:	9b01      	ldr	r3, [sp, #4]
 8000baa:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000bac:	69c3      	ldr	r3, [r0, #28]
 8000bae:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000bb0:	69c3      	ldr	r3, [r0, #28]
 8000bb2:	9301      	str	r3, [sp, #4]
}
 8000bb4:	b002      	add	sp, #8
 8000bb6:	4770      	bx	lr

08000bb8 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000bb8:	6903      	ldr	r3, [r0, #16]
 8000bba:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000bbc:	bf0c      	ite	eq
 8000bbe:	2000      	moveq	r0, #0
 8000bc0:	2001      	movne	r0, #1
 8000bc2:	4770      	bx	lr

08000bc4 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000bc4:	6900      	ldr	r0, [r0, #16]
}
 8000bc6:	b280      	uxth	r0, r0
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000bcc:	6943      	ldr	r3, [r0, #20]
 8000bce:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2000      	moveq	r0, #0
 8000bd4:	2001      	movne	r0, #1
 8000bd6:	4770      	bx	lr

08000bd8 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8000bd8:	6940      	ldr	r0, [r0, #20]
}
 8000bda:	b280      	uxth	r0, r0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000be0:	8301      	strh	r1, [r0, #24]
 8000be2:	4770      	bx	lr

08000be4 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000be4:	8341      	strh	r1, [r0, #26]
 8000be6:	4770      	bx	lr

08000be8 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000be8:	b90a      	cbnz	r2, 8000bee <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000bea:	8341      	strh	r1, [r0, #26]
 8000bec:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000bee:	8301      	strh	r1, [r0, #24]
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8000bf4:	6141      	str	r1, [r0, #20]
 8000bf6:	4770      	bx	lr

08000bf8 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000bf8:	6943      	ldr	r3, [r0, #20]
 8000bfa:	4059      	eors	r1, r3
 8000bfc:	6141      	str	r1, [r0, #20]
 8000bfe:	4770      	bx	lr

08000c00 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000c00:	08cb      	lsrs	r3, r1, #3
 8000c02:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000c06:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000c0a:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000c0c:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000c0e:	6a04      	ldr	r4, [r0, #32]
 8000c10:	230f      	movs	r3, #15
 8000c12:	408b      	lsls	r3, r1
 8000c14:	ea24 0303 	bic.w	r3, r4, r3
 8000c18:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000c1a:	6a03      	ldr	r3, [r0, #32]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 8000c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000c20:	408a      	lsls	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000c22:	4313      	orrs	r3, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000c24:	6203      	str	r3, [r0, #32]
}
 8000c26:	4770      	bx	lr

08000c28 <main>:
  while ((msTicks - curTicks) < dlyTicks);
}

void setSysTick(){
	// ---------- SysTick timer (1ms) -------- //
	if (SysTick_Config(SystemCoreClock / 1000)) {
 8000c28:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <main+0x60>)
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;	//PA0 is connected to high, so use pull down resistor
	GPIO_Init(GPIOA, &GPIO_InitStructure);
}


int main(void) {
 8000c2a:	b508      	push	{r3, lr}
  while ((msTicks - curTicks) < dlyTicks);
}

void setSysTick(){
	// ---------- SysTick timer (1ms) -------- //
	if (SysTick_Config(SystemCoreClock / 1000)) {
 8000c2c:	6812      	ldr	r2, [r2, #0]
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <main+0x64>)
 8000c30:	fba3 1202 	umull	r1, r2, r3, r2
 8000c34:	0992      	lsrs	r2, r2, #6
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000c36:	3a01      	subs	r2, #1
 8000c38:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8000c3c:	d222      	bcs.n	8000c84 <main+0x5c>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <main+0x68>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000c40:	4814      	ldr	r0, [pc, #80]	; (8000c94 <main+0x6c>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000c42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000c44:	2100      	movs	r1, #0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000c46:	24f0      	movs	r4, #240	; 0xf0
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c48:	2207      	movs	r2, #7
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000c4a:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000c4e:	6099      	str	r1, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c50:	601a      	str	r2, [r3, #0]
}


int main(void) {
	setSysTick();
	init_GPIO();
 8000c52:	f7ff fac3 	bl	80001dc <init_GPIO>


while(1){
		//if(GPIOA->IDR & 0x01)
		if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0))
 8000c56:	4810      	ldr	r0, [pc, #64]	; (8000c98 <main+0x70>)
 8000c58:	4c10      	ldr	r4, [pc, #64]	; (8000c9c <main+0x74>)
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	f7ff ffac 	bl	8000bb8 <GPIO_ReadInputDataBit>
 8000c60:	b950      	cbnz	r0, 8000c78 <main+0x50>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000c62:	6822      	ldr	r2, [r4, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000c64:	6823      	ldr	r3, [r4, #0]
 8000c66:	1a9b      	subs	r3, r3, r2
 8000c68:	2bc8      	cmp	r3, #200	; 0xc8
 8000c6a:	d3fb      	bcc.n	8000c64 <main+0x3c>
	init_GPIO();


while(1){
		//if(GPIOA->IDR & 0x01)
		if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0))
 8000c6c:	480a      	ldr	r0, [pc, #40]	; (8000c98 <main+0x70>)
 8000c6e:	2101      	movs	r1, #1
 8000c70:	f7ff ffa2 	bl	8000bb8 <GPIO_ReadInputDataBit>
 8000c74:	2800      	cmp	r0, #0
 8000c76:	d0f4      	beq.n	8000c62 <main+0x3a>
			GPIO_ToggleBits(GPIOD, GPIO_Pin_14);
 8000c78:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <main+0x78>)
 8000c7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c7e:	f7ff ffbb 	bl	8000bf8 <GPIO_ToggleBits>
 8000c82:	e7ee      	b.n	8000c62 <main+0x3a>
 8000c84:	e7fe      	b.n	8000c84 <main+0x5c>
 8000c86:	bf00      	nop
 8000c88:	20000010 	.word	0x20000010
 8000c8c:	10624dd3 	.word	0x10624dd3
 8000c90:	e000e010 	.word	0xe000e010
 8000c94:	e000ed00 	.word	0xe000ed00
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	20000024 	.word	0x20000024
 8000ca0:	40020c00 	.word	0x40020c00
