
/Users/User/Desktop/STM32F4_Examples/03_EXTI/build/blinky.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <SysTick_Handler>:
*/
#include <stdio.h>
#include "stm32f4xx.h"
volatile uint32_t msTicks;                      /* counts 1ms timeTicks       */
void SysTick_Handler(void) {
    msTicks++;
 8000188:	4b02      	ldr	r3, [pc, #8]	; (8000194 <SysTick_Handler+0xc>)
 800018a:	681a      	ldr	r2, [r3, #0]
 800018c:	3201      	adds	r2, #1
 800018e:	601a      	str	r2, [r3, #0]
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	20000024 	.word	0x20000024

08000198 <setSysTick>:
    while ((msTicks - curTicks) < dlyTicks);
}

void setSysTick(){
    // ---------- SysTick timer (1ms) -------- //
    if (SysTick_Config(SystemCoreClock / 1000)) {
 8000198:	4a0c      	ldr	r2, [pc, #48]	; (80001cc <setSysTick+0x34>)
 800019a:	4b0d      	ldr	r3, [pc, #52]	; (80001d0 <setSysTick+0x38>)
 800019c:	6812      	ldr	r2, [r2, #0]
 800019e:	fba3 1202 	umull	r1, r2, r3, r2
 80001a2:	0992      	lsrs	r2, r2, #6
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80001a4:	3a01      	subs	r2, #1
 80001a6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
static void Delay(__IO uint32_t dlyTicks){
    uint32_t curTicks = msTicks;
    while ((msTicks - curTicks) < dlyTicks);
}

void setSysTick(){
 80001aa:	b410      	push	{r4}
 80001ac:	d20c      	bcs.n	80001c8 <setSysTick+0x30>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80001ae:	4b09      	ldr	r3, [pc, #36]	; (80001d4 <setSysTick+0x3c>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80001b0:	4809      	ldr	r0, [pc, #36]	; (80001d8 <setSysTick+0x40>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80001b2:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80001b4:	24f0      	movs	r4, #240	; 0xf0
 80001b6:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80001ba:	2100      	movs	r1, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001bc:	2207      	movs	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80001be:	6099      	str	r1, [r3, #8]
    // ---------- SysTick timer (1ms) -------- //
    if (SysTick_Config(SystemCoreClock / 1000)) {
        // Capture error
        while (1){};
    }
}
 80001c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	4770      	bx	lr
 80001c8:	e7fe      	b.n	80001c8 <setSysTick+0x30>
 80001ca:	bf00      	nop
 80001cc:	20000010 	.word	0x20000010
 80001d0:	10624dd3 	.word	0x10624dd3
 80001d4:	e000e010 	.word	0xe000e010
 80001d8:	e000ed00 	.word	0xe000ed00

080001dc <initialize>:

void initialize() {
 80001dc:	b530      	push	{r4, r5, lr}
    GPIO_InitTypeDef  GPIO_InitStructure;
    
    // ---------- GPIO  for LEDS -------- //
    // GPIOD Periph clock enable
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80001de:	2008      	movs	r0, #8
        // Capture error
        while (1){};
    }
}

void initialize() {
 80001e0:	b087      	sub	sp, #28
    GPIO_InitTypeDef  GPIO_InitStructure;
    
    // ---------- GPIO  for LEDS -------- //
    // GPIOD Periph clock enable
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80001e2:	2101      	movs	r1, #1
 80001e4:	f000 fb62 	bl	80008ac <RCC_AHB1PeriphClockCmd>
    
    // Configure PD13
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80001e8:	2401      	movs	r4, #1
    // ---------- GPIO  for LEDS -------- //
    // GPIOD Periph clock enable
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    
    // Configure PD13
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 80001ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80001ee:	2500      	movs	r5, #0
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80001f0:	2302      	movs	r3, #2
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_Init(GPIOD, &GPIO_InitStructure);
 80001f2:	a902      	add	r1, sp, #8
 80001f4:	481d      	ldr	r0, [pc, #116]	; (800026c <initialize+0x90>)
    // ---------- GPIO  for LEDS -------- //
    // GPIOD Periph clock enable
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    
    // Configure PD13
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 80001f6:	9202      	str	r2, [sp, #8]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80001f8:	f88d 300d 	strb.w	r3, [sp, #13]
    // GPIOD Periph clock enable
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    
    // Configure PD13
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80001fc:	f88d 400c 	strb.w	r4, [sp, #12]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000200:	f88d 500e 	strb.w	r5, [sp, #14]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000204:	f88d 500f 	strb.w	r5, [sp, #15]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000208:	f000 fd6e 	bl	8000ce8 <GPIO_Init>
    // ---------- GPIO  for BTN -------- //
    NVIC_InitTypeDef NVIC_InitStructure;
    EXTI_InitTypeDef EXTI_InitStructure;
    
    /* Enable GPIOA clock */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800020c:	4620      	mov	r0, r4
 800020e:	4621      	mov	r1, r4
 8000210:	f000 fb4c 	bl	80008ac <RCC_AHB1PeriphClockCmd>
    /* Enable SYSCFG clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000214:	4621      	mov	r1, r4
 8000216:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800021a:	f000 fb77 	bl	800090c <RCC_APB2PeriphClockCmd>
    /* Configure PA0 pin as input floating */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN; //Load parameters into GPIO data structure
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
    GPIO_Init(GPIOA, &GPIO_InitStructure); //Pass structure to GPIO initialization function
 800021e:	a902      	add	r1, sp, #8
 8000220:	4813      	ldr	r0, [pc, #76]	; (8000270 <initialize+0x94>)
    /* Enable GPIOA clock */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    /* Enable SYSCFG clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    /* Configure PA0 pin as input floating */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN; //Load parameters into GPIO data structure
 8000222:	f88d 500c 	strb.w	r5, [sp, #12]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000226:	f88d 500f 	strb.w	r5, [sp, #15]
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 800022a:	9402      	str	r4, [sp, #8]
    GPIO_Init(GPIOA, &GPIO_InitStructure); //Pass structure to GPIO initialization function
 800022c:	f000 fd5c 	bl	8000ce8 <GPIO_Init>
    /* Connect EXTI Line0 to PA0 pin */
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
 8000230:	4629      	mov	r1, r5
 8000232:	4628      	mov	r0, r5
 8000234:	f000 fe26 	bl	8000e84 <SYSCFG_EXTILineConfig>
    /* Configure EXTI Line0 */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0; //Load parameters into EXTI data structure
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8000238:	2308      	movs	r3, #8
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure); //Pass structure to EXTI initialization function
 800023a:	a804      	add	r0, sp, #16
    /* Connect EXTI Line0 to PA0 pin */
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
    /* Configure EXTI Line0 */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0; //Load parameters into EXTI data structure
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 800023c:	f88d 3015 	strb.w	r3, [sp, #21]
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
    GPIO_Init(GPIOA, &GPIO_InitStructure); //Pass structure to GPIO initialization function
    /* Connect EXTI Line0 to PA0 pin */
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
    /* Configure EXTI Line0 */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0; //Load parameters into EXTI data structure
 8000240:	9404      	str	r4, [sp, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000242:	f88d 5014 	strb.w	r5, [sp, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000246:	f88d 4016 	strb.w	r4, [sp, #22]
    EXTI_Init(&EXTI_InitStructure); //Pass structure to EXTI initialization function
 800024a:	f000 fc2f 	bl	8000aac <EXTI_Init>
    /* Enable and set EXTI Line0 Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn; //Load parameters into NVIC data structure
 800024e:	2306      	movs	r3, #6
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure); //Pass structure to NVIC initialization function
 8000250:	a801      	add	r0, sp, #4
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure); //Pass structure to EXTI initialization function
    /* Enable and set EXTI Line0 Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn; //Load parameters into NVIC data structure
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
 8000252:	f88d 4005 	strb.w	r4, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
 8000256:	f88d 4006 	strb.w	r4, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800025a:	f88d 4007 	strb.w	r4, [sp, #7]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure); //Pass structure to EXTI initialization function
    /* Enable and set EXTI Line0 Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn; //Load parameters into NVIC data structure
 800025e:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure); //Pass structure to NVIC initialization function
 8000262:	f000 f919 	bl	8000498 <NVIC_Init>
}
 8000266:	b007      	add	sp, #28
 8000268:	bd30      	pop	{r4, r5, pc}
 800026a:	bf00      	nop
 800026c:	40020c00 	.word	0x40020c00
 8000270:	40020000 	.word	0x40020000

08000274 <Default_Handler>:
// This is the code that gets called when the processor receives an unexpected
// interrupt.	This simply enters an infinite loop, preserving the system state
// for examination by a debugger.
//
//*****************************************************************************
void Default_Handler(void) {
 8000274:	e7fe      	b.n	8000274 <Default_Handler>
 8000276:	bf00      	nop

08000278 <Reset_Handler>:
* Input			:
* Output		:
* Return		:
*******************************************************************************/
void Reset_Handler(void)
{
 8000278:	4668      	mov	r0, sp
 800027a:	f020 0107 	bic.w	r1, r0, #7
 800027e:	468d      	mov	sp, r1
 8000280:	b519      	push	{r0, r3, r4, lr}
	//
	// Copy the data segment initializers from flash to SRAM in ROM mode
	//
#if (__RAM_MODE__==0)
	pulSrc = &__sidata;
	for(pulDest = &__data_start__; pulDest < &__data_end__; )
 8000282:	4913      	ldr	r1, [pc, #76]	; (80002d0 <Reset_Handler+0x58>)
 8000284:	4b13      	ldr	r3, [pc, #76]	; (80002d4 <Reset_Handler+0x5c>)
 8000286:	4299      	cmp	r1, r3
 8000288:	d20b      	bcs.n	80002a2 <Reset_Handler+0x2a>
 800028a:	43c8      	mvns	r0, r1
 800028c:	4418      	add	r0, r3
 800028e:	f020 0003 	bic.w	r0, r0, #3
 8000292:	4c11      	ldr	r4, [pc, #68]	; (80002d8 <Reset_Handler+0x60>)
 8000294:	3004      	adds	r0, #4
 8000296:	2300      	movs	r3, #0
	{
		*(pulDest++) = *(pulSrc++);
 8000298:	58e2      	ldr	r2, [r4, r3]
 800029a:	50ca      	str	r2, [r1, r3]
 800029c:	3304      	adds	r3, #4
	//
	// Copy the data segment initializers from flash to SRAM in ROM mode
	//
#if (__RAM_MODE__==0)
	pulSrc = &__sidata;
	for(pulDest = &__data_start__; pulDest < &__data_end__; )
 800029e:	4283      	cmp	r3, r0
 80002a0:	d1fa      	bne.n	8000298 <Reset_Handler+0x20>


	//
	// Zero fill the bss segment.
	//
	for(pulDest = &__bss_start__; pulDest < &__bss_end__; )
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <Reset_Handler+0x64>)
 80002a4:	4a0e      	ldr	r2, [pc, #56]	; (80002e0 <Reset_Handler+0x68>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d20a      	bcs.n	80002c0 <Reset_Handler+0x48>
 80002aa:	43d9      	mvns	r1, r3
 80002ac:	4411      	add	r1, r2
 80002ae:	f021 0103 	bic.w	r1, r1, #3
 80002b2:	4419      	add	r1, r3
	{
		*(pulDest++) = 0;
 80002b4:	2200      	movs	r2, #0
 80002b6:	3b04      	subs	r3, #4
 80002b8:	f843 2f04 	str.w	r2, [r3, #4]!


	//
	// Zero fill the bss segment.
	//
	for(pulDest = &__bss_start__; pulDest < &__bss_end__; )
 80002bc:	428b      	cmp	r3, r1
 80002be:	d1fb      	bne.n	80002b8 <Reset_Handler+0x40>
	//
	//	Call IEC60335 CPU register tests POST
	//
//	__ASM volatile ("bl _CPUregTestPOST \t\n");

	SystemInit();
 80002c0:	f000 f834 	bl	800032c <SystemInit>

	//
	// Call the application's entry point.
	//
	main();
 80002c4:	f000 fe0a 	bl	8000edc <main>
}
 80002c8:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
 80002cc:	4685      	mov	sp, r0
 80002ce:	4770      	bx	lr
 80002d0:	20000000 	.word	0x20000000
 80002d4:	20000024 	.word	0x20000024
 80002d8:	08000f2c 	.word	0x08000f2c
 80002dc:	20000024 	.word	0x20000024
 80002e0:	20000028 	.word	0x20000028

080002e4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void NMI_Handler(void)
{
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop

080002e8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void HardFault_Handler(void)
{
 80002e8:	e7fe      	b.n	80002e8 <HardFault_Handler>
 80002ea:	bf00      	nop
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void MemManage_Handler(void)
{
 80002ec:	e7fe      	b.n	80002ec <HardFault_Handler+0x4>
 80002ee:	bf00      	nop
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void BusFault_Handler(void)
{
 80002f0:	e7fe      	b.n	80002f0 <HardFault_Handler+0x8>
 80002f2:	bf00      	nop
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void UsageFault_Handler(void)
{
 80002f4:	e7fe      	b.n	80002f4 <HardFault_Handler+0xc>
 80002f6:	bf00      	nop
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void SVC_Handler(void)
{
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void DebugMon_Handler(void)
{
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void PendSV_Handler(void)
{
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void SysTick_Handler(void)
{
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop

08000308 <EXTI0_IRQHandler>:

}

void EXTI0_IRQHandler(void) {
 8000308:	b508      	push	{r3, lr}
    // Make sure the interrupt flag is set for EXTI0
    if(EXTI_GetITStatus(EXTI_Line0) != RESET){
 800030a:	2001      	movs	r0, #1
 800030c:	f000 fc2e 	bl	8000b6c <EXTI_GetITStatus>
 8000310:	b900      	cbnz	r0, 8000314 <EXTI0_IRQHandler+0xc>
 8000312:	bd08      	pop	{r3, pc}
        GPIO_ToggleBits(GPIOD, GPIO_Pin_13);
 8000314:	4804      	ldr	r0, [pc, #16]	; (8000328 <EXTI0_IRQHandler+0x20>)
 8000316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800031a:	f000 fd81 	bl	8000e20 <GPIO_ToggleBits>
        
        // Clear the interrupt flag
        EXTI_ClearITPendingBit(EXTI_Line0);
 800031e:	2001      	movs	r0, #1
    }
}
 8000320:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // Make sure the interrupt flag is set for EXTI0
    if(EXTI_GetITStatus(EXTI_Line0) != RESET){
        GPIO_ToggleBits(GPIOD, GPIO_Pin_13);
        
        // Clear the interrupt flag
        EXTI_ClearITPendingBit(EXTI_Line0);
 8000324:	f000 bc2c 	b.w	8000b80 <EXTI_ClearITPendingBit>
 8000328:	40020c00 	.word	0x40020c00

0800032c <SystemInit>:
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800032c:	4b35      	ldr	r3, [pc, #212]	; (8000404 <SystemInit+0xd8>)

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800032e:	4836      	ldr	r0, [pc, #216]	; (8000408 <SystemInit+0xdc>)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000330:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000332:	2200      	movs	r2, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000334:	f041 0101 	orr.w	r1, r1, #1
 8000338:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800033a:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800033c:	6819      	ldr	r1, [r3, #0]
 800033e:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000342:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000346:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000348:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800034a:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800034c:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800034e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000352:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000354:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000360:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000362:	461a      	mov	r2, r3
 8000364:	e003      	b.n	800036e <SystemInit+0x42>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000366:	9b00      	ldr	r3, [sp, #0]
 8000368:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800036c:	d009      	beq.n	8000382 <SystemInit+0x56>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800036e:	6813      	ldr	r3, [r2, #0]
 8000370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000374:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 8000376:	9b00      	ldr	r3, [sp, #0]
 8000378:	3301      	adds	r3, #1
 800037a:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800037c:	9b01      	ldr	r3, [sp, #4]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d0f1      	beq.n	8000366 <SystemInit+0x3a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000382:	4b20      	ldr	r3, [pc, #128]	; (8000404 <SystemInit+0xd8>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 800038a:	bf18      	it	ne
 800038c:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800038e:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000390:	9b01      	ldr	r3, [sp, #4]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d005      	beq.n	80003a2 <SystemInit+0x76>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000396:	4b1d      	ldr	r3, [pc, #116]	; (800040c <SystemInit+0xe0>)
 8000398:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800039c:	609a      	str	r2, [r3, #8]
#endif
}
 800039e:	b002      	add	sp, #8
 80003a0:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003a2:	4b18      	ldr	r3, [pc, #96]	; (8000404 <SystemInit+0xd8>)
    PWR->CR |= PWR_CR_VOS;
 80003a4:	4a1a      	ldr	r2, [pc, #104]	; (8000410 <SystemInit+0xe4>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003a6:	6c18      	ldr	r0, [r3, #64]	; 0x40
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80003a8:	491a      	ldr	r1, [pc, #104]	; (8000414 <SystemInit+0xe8>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003aa:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80003ae:	6418      	str	r0, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80003b0:	6810      	ldr	r0, [r2, #0]
 80003b2:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80003b6:	6010      	str	r0, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80003b8:	689a      	ldr	r2, [r3, #8]
 80003ba:	609a      	str	r2, [r3, #8]

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80003bc:	689a      	ldr	r2, [r3, #8]
 80003be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80003c2:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80003c4:	689a      	ldr	r2, [r3, #8]
 80003c6:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80003ca:	609a      	str	r2, [r3, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80003cc:	6059      	str	r1, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80003d4:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80003d6:	4619      	mov	r1, r3
 80003d8:	680b      	ldr	r3, [r1, #0]
 80003da:	4a0a      	ldr	r2, [pc, #40]	; (8000404 <SystemInit+0xd8>)
 80003dc:	019b      	lsls	r3, r3, #6
 80003de:	d5fb      	bpl.n	80003d8 <SystemInit+0xac>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80003e0:	4b0d      	ldr	r3, [pc, #52]	; (8000418 <SystemInit+0xec>)
 80003e2:	f240 7105 	movw	r1, #1797	; 0x705
 80003e6:	6019      	str	r1, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003e8:	6893      	ldr	r3, [r2, #8]
 80003ea:	f023 0303 	bic.w	r3, r3, #3
 80003ee:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003f0:	6893      	ldr	r3, [r2, #8]
 80003f2:	f043 0302 	orr.w	r3, r3, #2
 80003f6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003f8:	6893      	ldr	r3, [r2, #8]
 80003fa:	f003 030c 	and.w	r3, r3, #12
 80003fe:	2b08      	cmp	r3, #8
 8000400:	d1fa      	bne.n	80003f8 <SystemInit+0xcc>
 8000402:	e7c8      	b.n	8000396 <SystemInit+0x6a>
 8000404:	40023800 	.word	0x40023800
 8000408:	24003010 	.word	0x24003010
 800040c:	e000ed00 	.word	0xe000ed00
 8000410:	40007000 	.word	0x40007000
 8000414:	07405408 	.word	0x07405408
 8000418:	40023c00 	.word	0x40023c00

0800041c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800041c:	4b15      	ldr	r3, [pc, #84]	; (8000474 <SystemCoreClockUpdate+0x58>)
 800041e:	689a      	ldr	r2, [r3, #8]
 8000420:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8000424:	2a04      	cmp	r2, #4
 8000426:	d023      	beq.n	8000470 <SystemCoreClockUpdate+0x54>
 8000428:	2a08      	cmp	r2, #8
 800042a:	d009      	beq.n	8000440 <SystemCoreClockUpdate+0x24>
 800042c:	4a12      	ldr	r2, [pc, #72]	; (8000478 <SystemCoreClockUpdate+0x5c>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800042e:	4911      	ldr	r1, [pc, #68]	; (8000474 <SystemCoreClockUpdate+0x58>)
 8000430:	4b12      	ldr	r3, [pc, #72]	; (800047c <SystemCoreClockUpdate+0x60>)
 8000432:	6889      	ldr	r1, [r1, #8]
 8000434:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8000438:	5c59      	ldrb	r1, [r3, r1]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800043a:	40ca      	lsrs	r2, r1
 800043c:	611a      	str	r2, [r3, #16]
 800043e:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000440:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000442:	6859      	ldr	r1, [r3, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000444:	685b      	ldr	r3, [r3, #4]
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 8000446:	0242      	lsls	r2, r0, #9
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000448:	bf4c      	ite	mi
 800044a:	4a0d      	ldrmi	r2, [pc, #52]	; (8000480 <SystemCoreClockUpdate+0x64>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800044c:	4a0a      	ldrpl	r2, [pc, #40]	; (8000478 <SystemCoreClockUpdate+0x5c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800044e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000452:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000456:	fbb2 f2f1 	udiv	r2, r2, r1
 800045a:	fb02 f203 	mul.w	r2, r2, r3
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800045e:	4b05      	ldr	r3, [pc, #20]	; (8000474 <SystemCoreClockUpdate+0x58>)
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000466:	3301      	adds	r3, #1
 8000468:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 800046a:	fbb2 f2f3 	udiv	r2, r2, r3
      break;
 800046e:	e7de      	b.n	800042e <SystemCoreClockUpdate+0x12>
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 8000470:	4a03      	ldr	r2, [pc, #12]	; (8000480 <SystemCoreClockUpdate+0x64>)
 8000472:	e7dc      	b.n	800042e <SystemCoreClockUpdate+0x12>
 8000474:	40023800 	.word	0x40023800
 8000478:	00f42400 	.word	0x00f42400
 800047c:	20000000 	.word	0x20000000
 8000480:	007a1200 	.word	0x007a1200

08000484 <NVIC_PriorityGroupConfig>:
 8000484:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000488:	4b02      	ldr	r3, [pc, #8]	; (8000494 <NVIC_PriorityGroupConfig+0x10>)
 800048a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800048e:	60d8      	str	r0, [r3, #12]
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	e000ed00 	.word	0xe000ed00

08000498 <NVIC_Init>:
 8000498:	78c3      	ldrb	r3, [r0, #3]
 800049a:	b4f0      	push	{r4, r5, r6, r7}
 800049c:	b963      	cbnz	r3, 80004b8 <NVIC_Init+0x20>
 800049e:	7803      	ldrb	r3, [r0, #0]
 80004a0:	4a19      	ldr	r2, [pc, #100]	; (8000508 <NVIC_Init+0x70>)
 80004a2:	0959      	lsrs	r1, r3, #5
 80004a4:	3120      	adds	r1, #32
 80004a6:	f003 031f 	and.w	r3, r3, #31
 80004aa:	2001      	movs	r0, #1
 80004ac:	fa00 f303 	lsl.w	r3, r0, r3
 80004b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80004b4:	bcf0      	pop	{r4, r5, r6, r7}
 80004b6:	4770      	bx	lr
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <NVIC_Init+0x74>)
 80004ba:	7847      	ldrb	r7, [r0, #1]
 80004bc:	68da      	ldr	r2, [r3, #12]
 80004be:	7885      	ldrb	r5, [r0, #2]
 80004c0:	7803      	ldrb	r3, [r0, #0]
 80004c2:	4911      	ldr	r1, [pc, #68]	; (8000508 <NVIC_Init+0x70>)
 80004c4:	43d2      	mvns	r2, r2
 80004c6:	f3c2 2202 	ubfx	r2, r2, #8, #3
 80004ca:	f1c2 0404 	rsb	r4, r2, #4
 80004ce:	260f      	movs	r6, #15
 80004d0:	b2e4      	uxtb	r4, r4
 80004d2:	fa07 f404 	lsl.w	r4, r7, r4
 80004d6:	fa46 f202 	asr.w	r2, r6, r2
 80004da:	b2e4      	uxtb	r4, r4
 80004dc:	402a      	ands	r2, r5
 80004de:	4322      	orrs	r2, r4
 80004e0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80004e4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80004e8:	0112      	lsls	r2, r2, #4
 80004ea:	b2d2      	uxtb	r2, r2
 80004ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80004f0:	7803      	ldrb	r3, [r0, #0]
 80004f2:	2001      	movs	r0, #1
 80004f4:	f003 021f 	and.w	r2, r3, #31
 80004f8:	095b      	lsrs	r3, r3, #5
 80004fa:	fa00 f202 	lsl.w	r2, r0, r2
 80004fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000502:	bcf0      	pop	{r4, r5, r6, r7}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	e000e100 	.word	0xe000e100
 800050c:	e000ed00 	.word	0xe000ed00

08000510 <NVIC_SetVectorTable>:
 8000510:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8000514:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8000518:	4b01      	ldr	r3, [pc, #4]	; (8000520 <NVIC_SetVectorTable+0x10>)
 800051a:	4308      	orrs	r0, r1
 800051c:	6098      	str	r0, [r3, #8]
 800051e:	4770      	bx	lr
 8000520:	e000ed00 	.word	0xe000ed00

08000524 <NVIC_SystemLPConfig>:
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <NVIC_SystemLPConfig+0x14>)
 8000526:	691a      	ldr	r2, [r3, #16]
 8000528:	b919      	cbnz	r1, 8000532 <NVIC_SystemLPConfig+0xe>
 800052a:	ea22 0000 	bic.w	r0, r2, r0
 800052e:	6118      	str	r0, [r3, #16]
 8000530:	4770      	bx	lr
 8000532:	4310      	orrs	r0, r2
 8000534:	6118      	str	r0, [r3, #16]
 8000536:	4770      	bx	lr
 8000538:	e000ed00 	.word	0xe000ed00

0800053c <SysTick_CLKSourceConfig>:
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <SysTick_CLKSourceConfig+0x14>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	2804      	cmp	r0, #4
 8000542:	bf0c      	ite	eq
 8000544:	f042 0204 	orreq.w	r2, r2, #4
 8000548:	f022 0204 	bicne.w	r2, r2, #4
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	4770      	bx	lr
 8000550:	e000e010 	.word	0xe000e010

08000554 <RCC_DeInit>:
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <RCC_DeInit+0x40>)
 8000556:	4810      	ldr	r0, [pc, #64]	; (8000598 <RCC_DeInit+0x44>)
 8000558:	6819      	ldr	r1, [r3, #0]
 800055a:	2200      	movs	r2, #0
 800055c:	f041 0101 	orr.w	r1, r1, #1
 8000560:	b430      	push	{r4, r5}
 8000562:	6019      	str	r1, [r3, #0]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	6819      	ldr	r1, [r3, #0]
 8000568:	4d0c      	ldr	r5, [pc, #48]	; (800059c <RCC_DeInit+0x48>)
 800056a:	4c0d      	ldr	r4, [pc, #52]	; (80005a0 <RCC_DeInit+0x4c>)
 800056c:	f021 51a8 	bic.w	r1, r1, #352321536	; 0x15000000
 8000570:	f421 2110 	bic.w	r1, r1, #589824	; 0x90000
 8000574:	6019      	str	r1, [r3, #0]
 8000576:	605d      	str	r5, [r3, #4]
 8000578:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
 800057c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 8000580:	6819      	ldr	r1, [r3, #0]
 8000582:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000586:	6019      	str	r1, [r3, #0]
 8000588:	bc30      	pop	{r4, r5}
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40023800 	.word	0x40023800
 8000598:	24003000 	.word	0x24003000
 800059c:	24003010 	.word	0x24003010
 80005a0:	20003000 	.word	0x20003000

080005a4 <RCC_HSEConfig>:
 80005a4:	4b02      	ldr	r3, [pc, #8]	; (80005b0 <RCC_HSEConfig+0xc>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
 80005aa:	7018      	strb	r0, [r3, #0]
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40023802 	.word	0x40023802

080005b4 <RCC_WaitForHSEStartUp>:
 80005b4:	b082      	sub	sp, #8
 80005b6:	2300      	movs	r3, #0
 80005b8:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <RCC_WaitForHSEStartUp+0x34>)
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	6813      	ldr	r3, [r2, #0]
 80005be:	039b      	lsls	r3, r3, #14
 80005c0:	d40c      	bmi.n	80005dc <RCC_WaitForHSEStartUp+0x28>
 80005c2:	9b01      	ldr	r3, [sp, #4]
 80005c4:	3301      	adds	r3, #1
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b01      	ldr	r3, [sp, #4]
 80005ca:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80005ce:	d1f5      	bne.n	80005bc <RCC_WaitForHSEStartUp+0x8>
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <RCC_WaitForHSEStartUp+0x34>)
 80005d2:	6818      	ldr	r0, [r3, #0]
 80005d4:	f3c0 4040 	ubfx	r0, r0, #17, #1
 80005d8:	b002      	add	sp, #8
 80005da:	4770      	bx	lr
 80005dc:	9b01      	ldr	r3, [sp, #4]
 80005de:	3301      	adds	r3, #1
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	9b01      	ldr	r3, [sp, #4]
 80005e4:	e7f4      	b.n	80005d0 <RCC_WaitForHSEStartUp+0x1c>
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800

080005ec <RCC_AdjustHSICalibrationValue>:
 80005ec:	4b03      	ldr	r3, [pc, #12]	; (80005fc <RCC_AdjustHSICalibrationValue+0x10>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80005f4:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 80005f8:	6018      	str	r0, [r3, #0]
 80005fa:	4770      	bx	lr
 80005fc:	40023800 	.word	0x40023800

08000600 <RCC_HSICmd>:
 8000600:	4b01      	ldr	r3, [pc, #4]	; (8000608 <RCC_HSICmd+0x8>)
 8000602:	6018      	str	r0, [r3, #0]
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	42470000 	.word	0x42470000

0800060c <RCC_LSEConfig>:
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <RCC_LSEConfig+0x1c>)
 800060e:	2200      	movs	r2, #0
 8000610:	2801      	cmp	r0, #1
 8000612:	701a      	strb	r2, [r3, #0]
 8000614:	701a      	strb	r2, [r3, #0]
 8000616:	d005      	beq.n	8000624 <RCC_LSEConfig+0x18>
 8000618:	2804      	cmp	r0, #4
 800061a:	d102      	bne.n	8000622 <RCC_LSEConfig+0x16>
 800061c:	2205      	movs	r2, #5
 800061e:	701a      	strb	r2, [r3, #0]
 8000620:	4770      	bx	lr
 8000622:	4770      	bx	lr
 8000624:	7018      	strb	r0, [r3, #0]
 8000626:	4770      	bx	lr
 8000628:	40023870 	.word	0x40023870

0800062c <RCC_LSICmd>:
 800062c:	4b01      	ldr	r3, [pc, #4]	; (8000634 <RCC_LSICmd+0x8>)
 800062e:	6018      	str	r0, [r3, #0]
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	42470e80 	.word	0x42470e80

08000638 <RCC_PLLConfig>:
 8000638:	b430      	push	{r4, r5}
 800063a:	9c02      	ldr	r4, [sp, #8]
 800063c:	4d06      	ldr	r5, [pc, #24]	; (8000658 <RCC_PLLConfig+0x20>)
 800063e:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 8000642:	085b      	lsrs	r3, r3, #1
 8000644:	4301      	orrs	r1, r0
 8000646:	3b01      	subs	r3, #1
 8000648:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 800064c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000650:	606b      	str	r3, [r5, #4]
 8000652:	bc30      	pop	{r4, r5}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800

0800065c <RCC_PLLCmd>:
 800065c:	4b01      	ldr	r3, [pc, #4]	; (8000664 <RCC_PLLCmd+0x8>)
 800065e:	6018      	str	r0, [r3, #0]
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	42470060 	.word	0x42470060

08000668 <RCC_PLLI2SConfig>:
 8000668:	0709      	lsls	r1, r1, #28
 800066a:	4b03      	ldr	r3, [pc, #12]	; (8000678 <RCC_PLLI2SConfig+0x10>)
 800066c:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8000670:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800

0800067c <RCC_PLLI2SCmd>:
 800067c:	4b01      	ldr	r3, [pc, #4]	; (8000684 <RCC_PLLI2SCmd+0x8>)
 800067e:	6018      	str	r0, [r3, #0]
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	42470068 	.word	0x42470068

08000688 <RCC_PLLSAIConfig>:
 8000688:	0712      	lsls	r2, r2, #28
 800068a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 800068e:	4b03      	ldr	r3, [pc, #12]	; (800069c <RCC_PLLSAIConfig+0x14>)
 8000690:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8000694:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800

080006a0 <RCC_PLLSAICmd>:
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <RCC_PLLSAICmd+0x8>)
 80006a2:	6018      	str	r0, [r3, #0]
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	42470070 	.word	0x42470070

080006ac <RCC_ClockSecuritySystemCmd>:
 80006ac:	4b01      	ldr	r3, [pc, #4]	; (80006b4 <RCC_ClockSecuritySystemCmd+0x8>)
 80006ae:	6018      	str	r0, [r3, #0]
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	4247004c 	.word	0x4247004c

080006b8 <RCC_MCO1Config>:
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <RCC_MCO1Config+0x10>)
 80006ba:	689a      	ldr	r2, [r3, #8]
 80006bc:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000
 80006c0:	4311      	orrs	r1, r2
 80006c2:	4308      	orrs	r0, r1
 80006c4:	6098      	str	r0, [r3, #8]
 80006c6:	4770      	bx	lr
 80006c8:	40023800 	.word	0x40023800

080006cc <RCC_MCO2Config>:
 80006cc:	4b03      	ldr	r3, [pc, #12]	; (80006dc <RCC_MCO2Config+0x10>)
 80006ce:	689a      	ldr	r2, [r3, #8]
 80006d0:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 80006d4:	4311      	orrs	r1, r2
 80006d6:	4308      	orrs	r0, r1
 80006d8:	6098      	str	r0, [r3, #8]
 80006da:	4770      	bx	lr
 80006dc:	40023800 	.word	0x40023800

080006e0 <RCC_SYSCLKConfig>:
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <RCC_SYSCLKConfig+0x10>)
 80006e2:	689a      	ldr	r2, [r3, #8]
 80006e4:	f022 0203 	bic.w	r2, r2, #3
 80006e8:	4310      	orrs	r0, r2
 80006ea:	6098      	str	r0, [r3, #8]
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <RCC_GetSYSCLKSource>:
 80006f4:	4b02      	ldr	r3, [pc, #8]	; (8000700 <RCC_GetSYSCLKSource+0xc>)
 80006f6:	6898      	ldr	r0, [r3, #8]
 80006f8:	f000 000c 	and.w	r0, r0, #12
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800

08000704 <RCC_HCLKConfig>:
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <RCC_HCLKConfig+0x10>)
 8000706:	689a      	ldr	r2, [r3, #8]
 8000708:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800070c:	4310      	orrs	r0, r2
 800070e:	6098      	str	r0, [r3, #8]
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <RCC_PCLK1Config>:
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <RCC_PCLK1Config+0x10>)
 800071a:	689a      	ldr	r2, [r3, #8]
 800071c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8000720:	4310      	orrs	r0, r2
 8000722:	6098      	str	r0, [r3, #8]
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <RCC_PCLK2Config>:
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <RCC_PCLK2Config+0x10>)
 800072e:	689a      	ldr	r2, [r3, #8]
 8000730:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000734:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000738:	6098      	str	r0, [r3, #8]
 800073a:	4770      	bx	lr
 800073c:	40023800 	.word	0x40023800

08000740 <RCC_GetClocksFreq>:
 8000740:	4a1f      	ldr	r2, [pc, #124]	; (80007c0 <RCC_GetClocksFreq+0x80>)
 8000742:	6893      	ldr	r3, [r2, #8]
 8000744:	f003 030c 	and.w	r3, r3, #12
 8000748:	2b04      	cmp	r3, #4
 800074a:	b410      	push	{r4}
 800074c:	d01b      	beq.n	8000786 <RCC_GetClocksFreq+0x46>
 800074e:	2b08      	cmp	r3, #8
 8000750:	d01c      	beq.n	800078c <RCC_GetClocksFreq+0x4c>
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <RCC_GetClocksFreq+0x84>)
 8000754:	6003      	str	r3, [r0, #0]
 8000756:	491a      	ldr	r1, [pc, #104]	; (80007c0 <RCC_GetClocksFreq+0x80>)
 8000758:	4a1b      	ldr	r2, [pc, #108]	; (80007c8 <RCC_GetClocksFreq+0x88>)
 800075a:	688c      	ldr	r4, [r1, #8]
 800075c:	f3c4 1403 	ubfx	r4, r4, #4, #4
 8000760:	5d14      	ldrb	r4, [r2, r4]
 8000762:	40e3      	lsrs	r3, r4
 8000764:	6043      	str	r3, [r0, #4]
 8000766:	688c      	ldr	r4, [r1, #8]
 8000768:	f3c4 2482 	ubfx	r4, r4, #10, #3
 800076c:	5d14      	ldrb	r4, [r2, r4]
 800076e:	fa23 f404 	lsr.w	r4, r3, r4
 8000772:	6084      	str	r4, [r0, #8]
 8000774:	6889      	ldr	r1, [r1, #8]
 8000776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800077a:	f3c1 3142 	ubfx	r1, r1, #13, #3
 800077e:	5c52      	ldrb	r2, [r2, r1]
 8000780:	40d3      	lsrs	r3, r2
 8000782:	60c3      	str	r3, [r0, #12]
 8000784:	4770      	bx	lr
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <RCC_GetClocksFreq+0x8c>)
 8000788:	6003      	str	r3, [r0, #0]
 800078a:	e7e4      	b.n	8000756 <RCC_GetClocksFreq+0x16>
 800078c:	6854      	ldr	r4, [r2, #4]
 800078e:	6851      	ldr	r1, [r2, #4]
 8000790:	6852      	ldr	r2, [r2, #4]
 8000792:	0263      	lsls	r3, r4, #9
 8000794:	bf4c      	ite	mi
 8000796:	4b0d      	ldrmi	r3, [pc, #52]	; (80007cc <RCC_GetClocksFreq+0x8c>)
 8000798:	4b0a      	ldrpl	r3, [pc, #40]	; (80007c4 <RCC_GetClocksFreq+0x84>)
 800079a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800079e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80007a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a6:	fb03 f302 	mul.w	r3, r3, r2
 80007aa:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <RCC_GetClocksFreq+0x80>)
 80007ac:	6852      	ldr	r2, [r2, #4]
 80007ae:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80007b2:	3201      	adds	r2, #1
 80007b4:	0052      	lsls	r2, r2, #1
 80007b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80007ba:	6003      	str	r3, [r0, #0]
 80007bc:	e7cb      	b.n	8000756 <RCC_GetClocksFreq+0x16>
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	00f42400 	.word	0x00f42400
 80007c8:	20000014 	.word	0x20000014
 80007cc:	007a1200 	.word	0x007a1200

080007d0 <RCC_RTCCLKConfig>:
 80007d0:	f400 7340 	and.w	r3, r0, #768	; 0x300
 80007d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80007d8:	d109      	bne.n	80007ee <RCC_RTCCLKConfig+0x1e>
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <RCC_RTCCLKConfig+0x2c>)
 80007dc:	6891      	ldr	r1, [r2, #8]
 80007de:	f020 4370 	bic.w	r3, r0, #4026531840	; 0xf0000000
 80007e2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80007e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80007ea:	430b      	orrs	r3, r1
 80007ec:	6093      	str	r3, [r2, #8]
 80007ee:	4b03      	ldr	r3, [pc, #12]	; (80007fc <RCC_RTCCLKConfig+0x2c>)
 80007f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80007f2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80007f6:	4310      	orrs	r0, r2
 80007f8:	6718      	str	r0, [r3, #112]	; 0x70
 80007fa:	4770      	bx	lr
 80007fc:	40023800 	.word	0x40023800

08000800 <RCC_RTCCLKCmd>:
 8000800:	4b01      	ldr	r3, [pc, #4]	; (8000808 <RCC_RTCCLKCmd+0x8>)
 8000802:	6018      	str	r0, [r3, #0]
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	42470e3c 	.word	0x42470e3c

0800080c <RCC_BackupResetCmd>:
 800080c:	4b01      	ldr	r3, [pc, #4]	; (8000814 <RCC_BackupResetCmd+0x8>)
 800080e:	6018      	str	r0, [r3, #0]
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	42470e40 	.word	0x42470e40

08000818 <RCC_I2SCLKConfig>:
 8000818:	4b01      	ldr	r3, [pc, #4]	; (8000820 <RCC_I2SCLKConfig+0x8>)
 800081a:	6018      	str	r0, [r3, #0]
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	4247015c 	.word	0x4247015c

08000824 <RCC_SAIPLLI2SClkDivConfig>:
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <RCC_SAIPLLI2SClkDivConfig+0x14>)
 8000826:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800082a:	3801      	subs	r0, #1
 800082c:	f022 021f 	bic.w	r2, r2, #31
 8000830:	4302      	orrs	r2, r0
 8000832:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000836:	4770      	bx	lr
 8000838:	40023800 	.word	0x40023800

0800083c <RCC_SAIPLLSAIClkDivConfig>:
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <RCC_SAIPLLSAIClkDivConfig+0x18>)
 800083e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000842:	3801      	subs	r0, #1
 8000844:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8000848:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800084c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <RCC_SAIBlockACLKConfig>:
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <RCC_SAIBlockACLKConfig+0x14>)
 800085a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800085e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8000862:	4310      	orrs	r0, r2
 8000864:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800

08000870 <RCC_SAIBlockBCLKConfig>:
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <RCC_SAIBlockBCLKConfig+0x14>)
 8000872:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000876:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800087a:	4310      	orrs	r0, r2
 800087c:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800

08000888 <RCC_LTDCCLKDivConfig>:
 8000888:	4b04      	ldr	r3, [pc, #16]	; (800089c <RCC_LTDCCLKDivConfig+0x14>)
 800088a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800088e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000892:	4310      	orrs	r0, r2
 8000894:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800

080008a0 <RCC_TIMCLKPresConfig>:
 80008a0:	4b01      	ldr	r3, [pc, #4]	; (80008a8 <RCC_TIMCLKPresConfig+0x8>)
 80008a2:	6018      	str	r0, [r3, #0]
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	424711e0 	.word	0x424711e0

080008ac <RCC_AHB1PeriphClockCmd>:
 80008ac:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <RCC_AHB1PeriphClockCmd+0x14>)
 80008ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008b0:	b919      	cbnz	r1, 80008ba <RCC_AHB1PeriphClockCmd+0xe>
 80008b2:	ea22 0000 	bic.w	r0, r2, r0
 80008b6:	6318      	str	r0, [r3, #48]	; 0x30
 80008b8:	4770      	bx	lr
 80008ba:	4310      	orrs	r0, r2
 80008bc:	6318      	str	r0, [r3, #48]	; 0x30
 80008be:	4770      	bx	lr
 80008c0:	40023800 	.word	0x40023800

080008c4 <RCC_AHB2PeriphClockCmd>:
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <RCC_AHB2PeriphClockCmd+0x14>)
 80008c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008c8:	b919      	cbnz	r1, 80008d2 <RCC_AHB2PeriphClockCmd+0xe>
 80008ca:	ea22 0000 	bic.w	r0, r2, r0
 80008ce:	6358      	str	r0, [r3, #52]	; 0x34
 80008d0:	4770      	bx	lr
 80008d2:	4310      	orrs	r0, r2
 80008d4:	6358      	str	r0, [r3, #52]	; 0x34
 80008d6:	4770      	bx	lr
 80008d8:	40023800 	.word	0x40023800

080008dc <RCC_AHB3PeriphClockCmd>:
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <RCC_AHB3PeriphClockCmd+0x14>)
 80008de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008e0:	b919      	cbnz	r1, 80008ea <RCC_AHB3PeriphClockCmd+0xe>
 80008e2:	ea22 0000 	bic.w	r0, r2, r0
 80008e6:	6398      	str	r0, [r3, #56]	; 0x38
 80008e8:	4770      	bx	lr
 80008ea:	4310      	orrs	r0, r2
 80008ec:	6398      	str	r0, [r3, #56]	; 0x38
 80008ee:	4770      	bx	lr
 80008f0:	40023800 	.word	0x40023800

080008f4 <RCC_APB1PeriphClockCmd>:
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <RCC_APB1PeriphClockCmd+0x14>)
 80008f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008f8:	b919      	cbnz	r1, 8000902 <RCC_APB1PeriphClockCmd+0xe>
 80008fa:	ea22 0000 	bic.w	r0, r2, r0
 80008fe:	6418      	str	r0, [r3, #64]	; 0x40
 8000900:	4770      	bx	lr
 8000902:	4310      	orrs	r0, r2
 8000904:	6418      	str	r0, [r3, #64]	; 0x40
 8000906:	4770      	bx	lr
 8000908:	40023800 	.word	0x40023800

0800090c <RCC_APB2PeriphClockCmd>:
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <RCC_APB2PeriphClockCmd+0x14>)
 800090e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000910:	b919      	cbnz	r1, 800091a <RCC_APB2PeriphClockCmd+0xe>
 8000912:	ea22 0000 	bic.w	r0, r2, r0
 8000916:	6458      	str	r0, [r3, #68]	; 0x44
 8000918:	4770      	bx	lr
 800091a:	4310      	orrs	r0, r2
 800091c:	6458      	str	r0, [r3, #68]	; 0x44
 800091e:	4770      	bx	lr
 8000920:	40023800 	.word	0x40023800

08000924 <RCC_AHB1PeriphResetCmd>:
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <RCC_AHB1PeriphResetCmd+0x14>)
 8000926:	691a      	ldr	r2, [r3, #16]
 8000928:	b919      	cbnz	r1, 8000932 <RCC_AHB1PeriphResetCmd+0xe>
 800092a:	ea22 0000 	bic.w	r0, r2, r0
 800092e:	6118      	str	r0, [r3, #16]
 8000930:	4770      	bx	lr
 8000932:	4310      	orrs	r0, r2
 8000934:	6118      	str	r0, [r3, #16]
 8000936:	4770      	bx	lr
 8000938:	40023800 	.word	0x40023800

0800093c <RCC_AHB2PeriphResetCmd>:
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <RCC_AHB2PeriphResetCmd+0x14>)
 800093e:	695a      	ldr	r2, [r3, #20]
 8000940:	b919      	cbnz	r1, 800094a <RCC_AHB2PeriphResetCmd+0xe>
 8000942:	ea22 0000 	bic.w	r0, r2, r0
 8000946:	6158      	str	r0, [r3, #20]
 8000948:	4770      	bx	lr
 800094a:	4310      	orrs	r0, r2
 800094c:	6158      	str	r0, [r3, #20]
 800094e:	4770      	bx	lr
 8000950:	40023800 	.word	0x40023800

08000954 <RCC_AHB3PeriphResetCmd>:
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <RCC_AHB3PeriphResetCmd+0x14>)
 8000956:	699a      	ldr	r2, [r3, #24]
 8000958:	b919      	cbnz	r1, 8000962 <RCC_AHB3PeriphResetCmd+0xe>
 800095a:	ea22 0000 	bic.w	r0, r2, r0
 800095e:	6198      	str	r0, [r3, #24]
 8000960:	4770      	bx	lr
 8000962:	4310      	orrs	r0, r2
 8000964:	6198      	str	r0, [r3, #24]
 8000966:	4770      	bx	lr
 8000968:	40023800 	.word	0x40023800

0800096c <RCC_APB1PeriphResetCmd>:
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <RCC_APB1PeriphResetCmd+0x14>)
 800096e:	6a1a      	ldr	r2, [r3, #32]
 8000970:	b919      	cbnz	r1, 800097a <RCC_APB1PeriphResetCmd+0xe>
 8000972:	ea22 0000 	bic.w	r0, r2, r0
 8000976:	6218      	str	r0, [r3, #32]
 8000978:	4770      	bx	lr
 800097a:	4310      	orrs	r0, r2
 800097c:	6218      	str	r0, [r3, #32]
 800097e:	4770      	bx	lr
 8000980:	40023800 	.word	0x40023800

08000984 <RCC_APB2PeriphResetCmd>:
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <RCC_APB2PeriphResetCmd+0x14>)
 8000986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000988:	b919      	cbnz	r1, 8000992 <RCC_APB2PeriphResetCmd+0xe>
 800098a:	ea22 0000 	bic.w	r0, r2, r0
 800098e:	6258      	str	r0, [r3, #36]	; 0x24
 8000990:	4770      	bx	lr
 8000992:	4310      	orrs	r0, r2
 8000994:	6258      	str	r0, [r3, #36]	; 0x24
 8000996:	4770      	bx	lr
 8000998:	40023800 	.word	0x40023800

0800099c <RCC_AHB1PeriphClockLPModeCmd>:
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
 800099e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80009a0:	b919      	cbnz	r1, 80009aa <RCC_AHB1PeriphClockLPModeCmd+0xe>
 80009a2:	ea22 0000 	bic.w	r0, r2, r0
 80009a6:	6518      	str	r0, [r3, #80]	; 0x50
 80009a8:	4770      	bx	lr
 80009aa:	4310      	orrs	r0, r2
 80009ac:	6518      	str	r0, [r3, #80]	; 0x50
 80009ae:	4770      	bx	lr
 80009b0:	40023800 	.word	0x40023800

080009b4 <RCC_AHB2PeriphClockLPModeCmd>:
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
 80009b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80009b8:	b919      	cbnz	r1, 80009c2 <RCC_AHB2PeriphClockLPModeCmd+0xe>
 80009ba:	ea22 0000 	bic.w	r0, r2, r0
 80009be:	6558      	str	r0, [r3, #84]	; 0x54
 80009c0:	4770      	bx	lr
 80009c2:	4310      	orrs	r0, r2
 80009c4:	6558      	str	r0, [r3, #84]	; 0x54
 80009c6:	4770      	bx	lr
 80009c8:	40023800 	.word	0x40023800

080009cc <RCC_AHB3PeriphClockLPModeCmd>:
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
 80009ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009d0:	b919      	cbnz	r1, 80009da <RCC_AHB3PeriphClockLPModeCmd+0xe>
 80009d2:	ea22 0000 	bic.w	r0, r2, r0
 80009d6:	6598      	str	r0, [r3, #88]	; 0x58
 80009d8:	4770      	bx	lr
 80009da:	4310      	orrs	r0, r2
 80009dc:	6598      	str	r0, [r3, #88]	; 0x58
 80009de:	4770      	bx	lr
 80009e0:	40023800 	.word	0x40023800

080009e4 <RCC_APB1PeriphClockLPModeCmd>:
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <RCC_APB1PeriphClockLPModeCmd+0x14>)
 80009e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009e8:	b919      	cbnz	r1, 80009f2 <RCC_APB1PeriphClockLPModeCmd+0xe>
 80009ea:	ea22 0000 	bic.w	r0, r2, r0
 80009ee:	6618      	str	r0, [r3, #96]	; 0x60
 80009f0:	4770      	bx	lr
 80009f2:	4310      	orrs	r0, r2
 80009f4:	6618      	str	r0, [r3, #96]	; 0x60
 80009f6:	4770      	bx	lr
 80009f8:	40023800 	.word	0x40023800

080009fc <RCC_APB2PeriphClockLPModeCmd>:
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <RCC_APB2PeriphClockLPModeCmd+0x14>)
 80009fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000a00:	b919      	cbnz	r1, 8000a0a <RCC_APB2PeriphClockLPModeCmd+0xe>
 8000a02:	ea22 0000 	bic.w	r0, r2, r0
 8000a06:	6658      	str	r0, [r3, #100]	; 0x64
 8000a08:	4770      	bx	lr
 8000a0a:	4310      	orrs	r0, r2
 8000a0c:	6658      	str	r0, [r3, #100]	; 0x64
 8000a0e:	4770      	bx	lr
 8000a10:	40023800 	.word	0x40023800

08000a14 <RCC_ITConfig>:
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <RCC_ITConfig+0x14>)
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	b919      	cbnz	r1, 8000a22 <RCC_ITConfig+0xe>
 8000a1a:	ea22 0000 	bic.w	r0, r2, r0
 8000a1e:	7018      	strb	r0, [r3, #0]
 8000a20:	4770      	bx	lr
 8000a22:	4310      	orrs	r0, r2
 8000a24:	7018      	strb	r0, [r3, #0]
 8000a26:	4770      	bx	lr
 8000a28:	4002380d 	.word	0x4002380d

08000a2c <RCC_GetFlagStatus>:
 8000a2c:	0943      	lsrs	r3, r0, #5
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d00b      	beq.n	8000a4a <RCC_GetFlagStatus+0x1e>
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <RCC_GetFlagStatus+0x30>)
 8000a36:	bf0c      	ite	eq
 8000a38:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
 8000a3a:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
 8000a3c:	f000 001f 	and.w	r0, r0, #31
 8000a40:	fa23 f000 	lsr.w	r0, r3, r0
 8000a44:	f000 0001 	and.w	r0, r0, #1
 8000a48:	4770      	bx	lr
 8000a4a:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <RCC_GetFlagStatus+0x30>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f000 001f 	and.w	r0, r0, #31
 8000a52:	fa23 f000 	lsr.w	r0, r3, r0
 8000a56:	f000 0001 	and.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	40023800 	.word	0x40023800

08000a60 <RCC_ClearFlag>:
 8000a60:	4b02      	ldr	r3, [pc, #8]	; (8000a6c <RCC_ClearFlag+0xc>)
 8000a62:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000a64:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000a68:	675a      	str	r2, [r3, #116]	; 0x74
 8000a6a:	4770      	bx	lr
 8000a6c:	40023800 	.word	0x40023800

08000a70 <RCC_GetITStatus>:
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <RCC_GetITStatus+0x10>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	4218      	tst	r0, r3
 8000a76:	bf0c      	ite	eq
 8000a78:	2000      	moveq	r0, #0
 8000a7a:	2001      	movne	r0, #1
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800

08000a84 <RCC_ClearITPendingBit>:
 8000a84:	4b01      	ldr	r3, [pc, #4]	; (8000a8c <RCC_ClearITPendingBit+0x8>)
 8000a86:	7018      	strb	r0, [r3, #0]
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	4002380e 	.word	0x4002380e

08000a90 <EXTI_DeInit>:
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <EXTI_DeInit+0x14>)
 8000a92:	4905      	ldr	r1, [pc, #20]	; (8000aa8 <EXTI_DeInit+0x18>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	6159      	str	r1, [r3, #20]
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40013c00 	.word	0x40013c00
 8000aa8:	007fffff 	.word	0x007fffff

08000aac <EXTI_Init>:
 8000aac:	7983      	ldrb	r3, [r0, #6]
 8000aae:	b470      	push	{r4, r5, r6}
 8000ab0:	b32b      	cbz	r3, 8000afe <EXTI_Init+0x52>
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <EXTI_Init+0x7c>)
 8000ab4:	6801      	ldr	r1, [r0, #0]
 8000ab6:	681e      	ldr	r6, [r3, #0]
 8000ab8:	7902      	ldrb	r2, [r0, #4]
 8000aba:	7945      	ldrb	r5, [r0, #5]
 8000abc:	43cc      	mvns	r4, r1
 8000abe:	4026      	ands	r6, r4
 8000ac0:	601e      	str	r6, [r3, #0]
 8000ac2:	685e      	ldr	r6, [r3, #4]
 8000ac4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000ac8:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8000acc:	4034      	ands	r4, r6
 8000ace:	605c      	str	r4, [r3, #4]
 8000ad0:	6814      	ldr	r4, [r2, #0]
 8000ad2:	4321      	orrs	r1, r4
 8000ad4:	6011      	str	r1, [r2, #0]
 8000ad6:	6802      	ldr	r2, [r0, #0]
 8000ad8:	6898      	ldr	r0, [r3, #8]
 8000ada:	43d1      	mvns	r1, r2
 8000adc:	4008      	ands	r0, r1
 8000ade:	6098      	str	r0, [r3, #8]
 8000ae0:	68d8      	ldr	r0, [r3, #12]
 8000ae2:	2d10      	cmp	r5, #16
 8000ae4:	ea01 0100 	and.w	r1, r1, r0
 8000ae8:	60d9      	str	r1, [r3, #12]
 8000aea:	d014      	beq.n	8000b16 <EXTI_Init+0x6a>
 8000aec:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8000af0:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
 8000af4:	bc70      	pop	{r4, r5, r6}
 8000af6:	6819      	ldr	r1, [r3, #0]
 8000af8:	430a      	orrs	r2, r1
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	4770      	bx	lr
 8000afe:	7903      	ldrb	r3, [r0, #4]
 8000b00:	6801      	ldr	r1, [r0, #0]
 8000b02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b06:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
 8000b0a:	bc70      	pop	{r4, r5, r6}
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	ea22 0201 	bic.w	r2, r2, r1
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	4770      	bx	lr
 8000b16:	6899      	ldr	r1, [r3, #8]
 8000b18:	4311      	orrs	r1, r2
 8000b1a:	6099      	str	r1, [r3, #8]
 8000b1c:	68d9      	ldr	r1, [r3, #12]
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	bc70      	pop	{r4, r5, r6}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40013c00 	.word	0x40013c00

08000b2c <EXTI_StructInit>:
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	220c      	movs	r2, #12
 8000b30:	7142      	strb	r2, [r0, #5]
 8000b32:	6003      	str	r3, [r0, #0]
 8000b34:	7103      	strb	r3, [r0, #4]
 8000b36:	7183      	strb	r3, [r0, #6]
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <EXTI_GenerateSWInterrupt>:
 8000b3c:	4b02      	ldr	r3, [pc, #8]	; (8000b48 <EXTI_GenerateSWInterrupt+0xc>)
 8000b3e:	691a      	ldr	r2, [r3, #16]
 8000b40:	4310      	orrs	r0, r2
 8000b42:	6118      	str	r0, [r3, #16]
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40013c00 	.word	0x40013c00

08000b4c <EXTI_GetFlagStatus>:
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <EXTI_GetFlagStatus+0x10>)
 8000b4e:	695b      	ldr	r3, [r3, #20]
 8000b50:	4218      	tst	r0, r3
 8000b52:	bf0c      	ite	eq
 8000b54:	2000      	moveq	r0, #0
 8000b56:	2001      	movne	r0, #1
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40013c00 	.word	0x40013c00

08000b60 <EXTI_ClearFlag>:
 8000b60:	4b01      	ldr	r3, [pc, #4]	; (8000b68 <EXTI_ClearFlag+0x8>)
 8000b62:	6158      	str	r0, [r3, #20]
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40013c00 	.word	0x40013c00

08000b6c <EXTI_GetITStatus>:
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <EXTI_GetITStatus+0x10>)
 8000b6e:	695b      	ldr	r3, [r3, #20]
 8000b70:	4218      	tst	r0, r3
 8000b72:	bf0c      	ite	eq
 8000b74:	2000      	moveq	r0, #0
 8000b76:	2001      	movne	r0, #1
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40013c00 	.word	0x40013c00

08000b80 <EXTI_ClearITPendingBit>:
 8000b80:	4b01      	ldr	r3, [pc, #4]	; (8000b88 <EXTI_ClearITPendingBit+0x8>)
 8000b82:	6158      	str	r0, [r3, #20]
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40013c00 	.word	0x40013c00

08000b8c <GPIO_DeInit>:
 8000b8c:	b508      	push	{r3, lr}
 8000b8e:	4b4b      	ldr	r3, [pc, #300]	; (8000cbc <GPIO_DeInit+0x130>)
 8000b90:	4298      	cmp	r0, r3
 8000b92:	d02a      	beq.n	8000bea <GPIO_DeInit+0x5e>
 8000b94:	4b4a      	ldr	r3, [pc, #296]	; (8000cc0 <GPIO_DeInit+0x134>)
 8000b96:	4298      	cmp	r0, r3
 8000b98:	d031      	beq.n	8000bfe <GPIO_DeInit+0x72>
 8000b9a:	4b4a      	ldr	r3, [pc, #296]	; (8000cc4 <GPIO_DeInit+0x138>)
 8000b9c:	4298      	cmp	r0, r3
 8000b9e:	d038      	beq.n	8000c12 <GPIO_DeInit+0x86>
 8000ba0:	4b49      	ldr	r3, [pc, #292]	; (8000cc8 <GPIO_DeInit+0x13c>)
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d03f      	beq.n	8000c26 <GPIO_DeInit+0x9a>
 8000ba6:	4b49      	ldr	r3, [pc, #292]	; (8000ccc <GPIO_DeInit+0x140>)
 8000ba8:	4298      	cmp	r0, r3
 8000baa:	d046      	beq.n	8000c3a <GPIO_DeInit+0xae>
 8000bac:	4b48      	ldr	r3, [pc, #288]	; (8000cd0 <GPIO_DeInit+0x144>)
 8000bae:	4298      	cmp	r0, r3
 8000bb0:	d04d      	beq.n	8000c4e <GPIO_DeInit+0xc2>
 8000bb2:	4b48      	ldr	r3, [pc, #288]	; (8000cd4 <GPIO_DeInit+0x148>)
 8000bb4:	4298      	cmp	r0, r3
 8000bb6:	d054      	beq.n	8000c62 <GPIO_DeInit+0xd6>
 8000bb8:	4b47      	ldr	r3, [pc, #284]	; (8000cd8 <GPIO_DeInit+0x14c>)
 8000bba:	4298      	cmp	r0, r3
 8000bbc:	d05b      	beq.n	8000c76 <GPIO_DeInit+0xea>
 8000bbe:	4b47      	ldr	r3, [pc, #284]	; (8000cdc <GPIO_DeInit+0x150>)
 8000bc0:	4298      	cmp	r0, r3
 8000bc2:	d062      	beq.n	8000c8a <GPIO_DeInit+0xfe>
 8000bc4:	4b46      	ldr	r3, [pc, #280]	; (8000ce0 <GPIO_DeInit+0x154>)
 8000bc6:	4298      	cmp	r0, r3
 8000bc8:	d06b      	beq.n	8000ca2 <GPIO_DeInit+0x116>
 8000bca:	4b46      	ldr	r3, [pc, #280]	; (8000ce4 <GPIO_DeInit+0x158>)
 8000bcc:	4298      	cmp	r0, r3
 8000bce:	d000      	beq.n	8000bd2 <GPIO_DeInit+0x46>
 8000bd0:	bd08      	pop	{r3, pc}
 8000bd2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	f7ff fea4 	bl	8000924 <RCC_AHB1PeriphResetCmd>
 8000bdc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000be0:	2100      	movs	r1, #0
 8000be2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000be6:	f7ff be9d 	b.w	8000924 <RCC_AHB1PeriphResetCmd>
 8000bea:	2001      	movs	r0, #1
 8000bec:	4601      	mov	r1, r0
 8000bee:	f7ff fe99 	bl	8000924 <RCC_AHB1PeriphResetCmd>
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000bfa:	f7ff be93 	b.w	8000924 <RCC_AHB1PeriphResetCmd>
 8000bfe:	2002      	movs	r0, #2
 8000c00:	2101      	movs	r1, #1
 8000c02:	f7ff fe8f 	bl	8000924 <RCC_AHB1PeriphResetCmd>
 8000c06:	2002      	movs	r0, #2
 8000c08:	2100      	movs	r1, #0
 8000c0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000c0e:	f7ff be89 	b.w	8000924 <RCC_AHB1PeriphResetCmd>
 8000c12:	2004      	movs	r0, #4
 8000c14:	2101      	movs	r1, #1
 8000c16:	f7ff fe85 	bl	8000924 <RCC_AHB1PeriphResetCmd>
 8000c1a:	2004      	movs	r0, #4
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000c22:	f7ff be7f 	b.w	8000924 <RCC_AHB1PeriphResetCmd>
 8000c26:	2008      	movs	r0, #8
 8000c28:	2101      	movs	r1, #1
 8000c2a:	f7ff fe7b 	bl	8000924 <RCC_AHB1PeriphResetCmd>
 8000c2e:	2008      	movs	r0, #8
 8000c30:	2100      	movs	r1, #0
 8000c32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000c36:	f7ff be75 	b.w	8000924 <RCC_AHB1PeriphResetCmd>
 8000c3a:	2010      	movs	r0, #16
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	f7ff fe71 	bl	8000924 <RCC_AHB1PeriphResetCmd>
 8000c42:	2010      	movs	r0, #16
 8000c44:	2100      	movs	r1, #0
 8000c46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000c4a:	f7ff be6b 	b.w	8000924 <RCC_AHB1PeriphResetCmd>
 8000c4e:	2020      	movs	r0, #32
 8000c50:	2101      	movs	r1, #1
 8000c52:	f7ff fe67 	bl	8000924 <RCC_AHB1PeriphResetCmd>
 8000c56:	2020      	movs	r0, #32
 8000c58:	2100      	movs	r1, #0
 8000c5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000c5e:	f7ff be61 	b.w	8000924 <RCC_AHB1PeriphResetCmd>
 8000c62:	2040      	movs	r0, #64	; 0x40
 8000c64:	2101      	movs	r1, #1
 8000c66:	f7ff fe5d 	bl	8000924 <RCC_AHB1PeriphResetCmd>
 8000c6a:	2040      	movs	r0, #64	; 0x40
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000c72:	f7ff be57 	b.w	8000924 <RCC_AHB1PeriphResetCmd>
 8000c76:	2080      	movs	r0, #128	; 0x80
 8000c78:	2101      	movs	r1, #1
 8000c7a:	f7ff fe53 	bl	8000924 <RCC_AHB1PeriphResetCmd>
 8000c7e:	2080      	movs	r0, #128	; 0x80
 8000c80:	2100      	movs	r1, #0
 8000c82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000c86:	f7ff be4d 	b.w	8000924 <RCC_AHB1PeriphResetCmd>
 8000c8a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c8e:	2101      	movs	r1, #1
 8000c90:	f7ff fe48 	bl	8000924 <RCC_AHB1PeriphResetCmd>
 8000c94:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000c9e:	f7ff be41 	b.w	8000924 <RCC_AHB1PeriphResetCmd>
 8000ca2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	f7ff fe3c 	bl	8000924 <RCC_AHB1PeriphResetCmd>
 8000cac:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000cb6:	f7ff be35 	b.w	8000924 <RCC_AHB1PeriphResetCmd>
 8000cba:	bf00      	nop
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	40020400 	.word	0x40020400
 8000cc4:	40020800 	.word	0x40020800
 8000cc8:	40020c00 	.word	0x40020c00
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40021400 	.word	0x40021400
 8000cd4:	40021800 	.word	0x40021800
 8000cd8:	40021c00 	.word	0x40021c00
 8000cdc:	40022000 	.word	0x40022000
 8000ce0:	40022400 	.word	0x40022400
 8000ce4:	40022800 	.word	0x40022800

08000ce8 <GPIO_Init>:
 8000ce8:	2200      	movs	r2, #0
 8000cea:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8000cee:	4613      	mov	r3, r2
 8000cf0:	680e      	ldr	r6, [r1, #0]
 8000cf2:	2701      	movs	r7, #1
 8000cf4:	f04f 0803 	mov.w	r8, #3
 8000cf8:	e004      	b.n	8000d04 <GPIO_Init+0x1c>
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	2b10      	cmp	r3, #16
 8000cfe:	f102 0202 	add.w	r2, r2, #2
 8000d02:	d02e      	beq.n	8000d62 <GPIO_Init+0x7a>
 8000d04:	fa07 f403 	lsl.w	r4, r7, r3
 8000d08:	ea04 0506 	and.w	r5, r4, r6
 8000d0c:	42a5      	cmp	r5, r4
 8000d0e:	d1f4      	bne.n	8000cfa <GPIO_Init+0x12>
 8000d10:	f8d0 9000 	ldr.w	r9, [r0]
 8000d14:	f891 c004 	ldrb.w	ip, [r1, #4]
 8000d18:	fa08 f402 	lsl.w	r4, r8, r2
 8000d1c:	43e4      	mvns	r4, r4
 8000d1e:	ea04 0909 	and.w	r9, r4, r9
 8000d22:	f8c0 9000 	str.w	r9, [r0]
 8000d26:	f8d0 9000 	ldr.w	r9, [r0]
 8000d2a:	fa0c fa02 	lsl.w	sl, ip, r2
 8000d2e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8000d32:	fa5f fc8c 	uxtb.w	ip, ip
 8000d36:	ea4a 0909 	orr.w	r9, sl, r9
 8000d3a:	f1bc 0f01 	cmp.w	ip, #1
 8000d3e:	f8c0 9000 	str.w	r9, [r0]
 8000d42:	d911      	bls.n	8000d68 <GPIO_Init+0x80>
 8000d44:	68c5      	ldr	r5, [r0, #12]
 8000d46:	f891 c007 	ldrb.w	ip, [r1, #7]
 8000d4a:	402c      	ands	r4, r5
 8000d4c:	60c4      	str	r4, [r0, #12]
 8000d4e:	68c5      	ldr	r5, [r0, #12]
 8000d50:	fa0c f402 	lsl.w	r4, ip, r2
 8000d54:	3301      	adds	r3, #1
 8000d56:	432c      	orrs	r4, r5
 8000d58:	2b10      	cmp	r3, #16
 8000d5a:	60c4      	str	r4, [r0, #12]
 8000d5c:	f102 0202 	add.w	r2, r2, #2
 8000d60:	d1d0      	bne.n	8000d04 <GPIO_Init+0x1c>
 8000d62:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8000d66:	4770      	bx	lr
 8000d68:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8000d6c:	f891 9005 	ldrb.w	r9, [r1, #5]
 8000d70:	f891 c006 	ldrb.w	ip, [r1, #6]
 8000d74:	ea04 0a0a 	and.w	sl, r4, sl
 8000d78:	f8c0 a008 	str.w	sl, [r0, #8]
 8000d7c:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8000d80:	fa09 f902 	lsl.w	r9, r9, r2
 8000d84:	ea49 090a 	orr.w	r9, r9, sl
 8000d88:	f8c0 9008 	str.w	r9, [r0, #8]
 8000d8c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8000d90:	ea29 0505 	bic.w	r5, r9, r5
 8000d94:	6045      	str	r5, [r0, #4]
 8000d96:	6845      	ldr	r5, [r0, #4]
 8000d98:	fa0c fc03 	lsl.w	ip, ip, r3
 8000d9c:	fa1f fc8c 	uxth.w	ip, ip
 8000da0:	ea4c 0505 	orr.w	r5, ip, r5
 8000da4:	6045      	str	r5, [r0, #4]
 8000da6:	e7cd      	b.n	8000d44 <GPIO_Init+0x5c>

08000da8 <GPIO_StructInit>:
 8000da8:	2300      	movs	r3, #0
 8000daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dae:	6002      	str	r2, [r0, #0]
 8000db0:	7103      	strb	r3, [r0, #4]
 8000db2:	7143      	strb	r3, [r0, #5]
 8000db4:	7183      	strb	r3, [r0, #6]
 8000db6:	71c3      	strb	r3, [r0, #7]
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <GPIO_PinLockConfig>:
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc2:	9301      	str	r3, [sp, #4]
 8000dc4:	9b01      	ldr	r3, [sp, #4]
 8000dc6:	430b      	orrs	r3, r1
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	9b01      	ldr	r3, [sp, #4]
 8000dcc:	61c3      	str	r3, [r0, #28]
 8000dce:	61c1      	str	r1, [r0, #28]
 8000dd0:	9b01      	ldr	r3, [sp, #4]
 8000dd2:	61c3      	str	r3, [r0, #28]
 8000dd4:	69c3      	ldr	r3, [r0, #28]
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	69c3      	ldr	r3, [r0, #28]
 8000dda:	9301      	str	r3, [sp, #4]
 8000ddc:	b002      	add	sp, #8
 8000dde:	4770      	bx	lr

08000de0 <GPIO_ReadInputDataBit>:
 8000de0:	6903      	ldr	r3, [r0, #16]
 8000de2:	4219      	tst	r1, r3
 8000de4:	bf0c      	ite	eq
 8000de6:	2000      	moveq	r0, #0
 8000de8:	2001      	movne	r0, #1
 8000dea:	4770      	bx	lr

08000dec <GPIO_ReadInputData>:
 8000dec:	6900      	ldr	r0, [r0, #16]
 8000dee:	b280      	uxth	r0, r0
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <GPIO_ReadOutputDataBit>:
 8000df4:	6943      	ldr	r3, [r0, #20]
 8000df6:	4219      	tst	r1, r3
 8000df8:	bf0c      	ite	eq
 8000dfa:	2000      	moveq	r0, #0
 8000dfc:	2001      	movne	r0, #1
 8000dfe:	4770      	bx	lr

08000e00 <GPIO_ReadOutputData>:
 8000e00:	6940      	ldr	r0, [r0, #20]
 8000e02:	b280      	uxth	r0, r0
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <GPIO_SetBits>:
 8000e08:	8301      	strh	r1, [r0, #24]
 8000e0a:	4770      	bx	lr

08000e0c <GPIO_ResetBits>:
 8000e0c:	8341      	strh	r1, [r0, #26]
 8000e0e:	4770      	bx	lr

08000e10 <GPIO_WriteBit>:
 8000e10:	b90a      	cbnz	r2, 8000e16 <GPIO_WriteBit+0x6>
 8000e12:	8341      	strh	r1, [r0, #26]
 8000e14:	4770      	bx	lr
 8000e16:	8301      	strh	r1, [r0, #24]
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <GPIO_Write>:
 8000e1c:	6141      	str	r1, [r0, #20]
 8000e1e:	4770      	bx	lr

08000e20 <GPIO_ToggleBits>:
 8000e20:	6943      	ldr	r3, [r0, #20]
 8000e22:	4059      	eors	r1, r3
 8000e24:	6141      	str	r1, [r0, #20]
 8000e26:	4770      	bx	lr

08000e28 <GPIO_PinAFConfig>:
 8000e28:	08cb      	lsrs	r3, r1, #3
 8000e2a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8000e2e:	f001 0107 	and.w	r1, r1, #7
 8000e32:	b410      	push	{r4}
 8000e34:	0089      	lsls	r1, r1, #2
 8000e36:	6a04      	ldr	r4, [r0, #32]
 8000e38:	230f      	movs	r3, #15
 8000e3a:	408b      	lsls	r3, r1
 8000e3c:	ea24 0303 	bic.w	r3, r4, r3
 8000e40:	6203      	str	r3, [r0, #32]
 8000e42:	6a03      	ldr	r3, [r0, #32]
 8000e44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e48:	408a      	lsls	r2, r1
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	6203      	str	r3, [r0, #32]
 8000e4e:	4770      	bx	lr

08000e50 <SYSCFG_DeInit>:
 8000e50:	b508      	push	{r3, lr}
 8000e52:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e56:	2101      	movs	r1, #1
 8000e58:	f7ff fd94 	bl	8000984 <RCC_APB2PeriphResetCmd>
 8000e5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e60:	2100      	movs	r1, #0
 8000e62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000e66:	f7ff bd8d 	b.w	8000984 <RCC_APB2PeriphResetCmd>
 8000e6a:	bf00      	nop

08000e6c <SYSCFG_MemoryRemapConfig>:
 8000e6c:	4b01      	ldr	r3, [pc, #4]	; (8000e74 <SYSCFG_MemoryRemapConfig+0x8>)
 8000e6e:	6018      	str	r0, [r3, #0]
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40013800 	.word	0x40013800

08000e78 <SYSCFG_MemorySwappingBank>:
 8000e78:	4b01      	ldr	r3, [pc, #4]	; (8000e80 <SYSCFG_MemorySwappingBank+0x8>)
 8000e7a:	6018      	str	r0, [r3, #0]
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	42270020 	.word	0x42270020

08000e84 <SYSCFG_EXTILineConfig>:
 8000e84:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8000e88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e8c:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8000e90:	f001 0103 	and.w	r1, r1, #3
 8000e94:	b410      	push	{r4}
 8000e96:	0089      	lsls	r1, r1, #2
 8000e98:	689c      	ldr	r4, [r3, #8]
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	408a      	lsls	r2, r1
 8000e9e:	ea24 0202 	bic.w	r2, r4, r2
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000eaa:	4088      	lsls	r0, r1
 8000eac:	4302      	orrs	r2, r0
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <SYSCFG_ETH_MediaInterfaceConfig>:
 8000eb4:	4b01      	ldr	r3, [pc, #4]	; (8000ebc <SYSCFG_ETH_MediaInterfaceConfig+0x8>)
 8000eb6:	6018      	str	r0, [r3, #0]
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	422700dc 	.word	0x422700dc

08000ec0 <SYSCFG_CompensationCellCmd>:
 8000ec0:	4b01      	ldr	r3, [pc, #4]	; (8000ec8 <SYSCFG_CompensationCellCmd+0x8>)
 8000ec2:	6018      	str	r0, [r3, #0]
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	42270400 	.word	0x42270400

08000ecc <SYSCFG_GetCompensationCellStatus>:
 8000ecc:	4b02      	ldr	r3, [pc, #8]	; (8000ed8 <SYSCFG_GetCompensationCellStatus+0xc>)
 8000ece:	6a18      	ldr	r0, [r3, #32]
 8000ed0:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40013800 	.word	0x40013800

08000edc <main>:
    while ((msTicks - curTicks) < dlyTicks);
}

void setSysTick(){
    // ---------- SysTick timer (1ms) -------- //
    if (SysTick_Config(SystemCoreClock / 1000)) {
 8000edc:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <main+0x3c>)
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure); //Pass structure to NVIC initialization function
}


int main(void) {
 8000ede:	b508      	push	{r3, lr}
    while ((msTicks - curTicks) < dlyTicks);
}

void setSysTick(){
    // ---------- SysTick timer (1ms) -------- //
    if (SysTick_Config(SystemCoreClock / 1000)) {
 8000ee0:	6812      	ldr	r2, [r2, #0]
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <main+0x40>)
 8000ee4:	fba3 1202 	umull	r1, r2, r3, r2
 8000ee8:	0992      	lsrs	r2, r2, #6
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000eea:	3a01      	subs	r2, #1
 8000eec:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8000ef0:	d211      	bcs.n	8000f16 <main+0x3a>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <main+0x44>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000ef4:	480b      	ldr	r0, [pc, #44]	; (8000f24 <main+0x48>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000ef6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000ef8:	2100      	movs	r1, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	2207      	movs	r2, #7
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000efc:	24f0      	movs	r4, #240	; 0xf0
 8000efe:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000f02:	6099      	str	r1, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f04:	601a      	str	r2, [r3, #0]
}


int main(void) {
    setSysTick();
    initialize();
 8000f06:	f7ff f969 	bl	80001dc <initialize>
    
    // Turn on LED
    GPIO_SetBits(GPIOD, GPIO_Pin_13);
 8000f0a:	4807      	ldr	r0, [pc, #28]	; (8000f28 <main+0x4c>)
 8000f0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f10:	f7ff ff7a 	bl	8000e08 <GPIO_SetBits>
 8000f14:	e7fe      	b.n	8000f14 <main+0x38>
 8000f16:	e7fe      	b.n	8000f16 <main+0x3a>
 8000f18:	20000010 	.word	0x20000010
 8000f1c:	10624dd3 	.word	0x10624dd3
 8000f20:	e000e010 	.word	0xe000e010
 8000f24:	e000ed00 	.word	0xe000ed00
 8000f28:	40020c00 	.word	0x40020c00
