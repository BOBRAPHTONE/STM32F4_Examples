
/Users/User/Desktop/STM32F4_Examples/02_USART/build/blinky.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <SysTick_Handler>:
#include "stm32f4xx.h"


volatile uint32_t msTicks;                      /* counts 1ms timeTicks       */
void SysTick_Handler(void) {
	msTicks++;
 8000188:	4b02      	ldr	r3, [pc, #8]	; (8000194 <SysTick_Handler+0xc>)
 800018a:	681a      	ldr	r2, [r3, #0]
 800018c:	3201      	adds	r2, #1
 800018e:	601a      	str	r2, [r3, #0]
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	20000028 	.word	0x20000028

08000198 <setSysTick>:
  while ((msTicks - curTicks) < dlyTicks);
}

void setSysTick(){
	// ---------- SysTick timer (1ms) -------- //
	if (SysTick_Config(SystemCoreClock / 1000)) {
 8000198:	4a0c      	ldr	r2, [pc, #48]	; (80001cc <setSysTick+0x34>)
 800019a:	4b0d      	ldr	r3, [pc, #52]	; (80001d0 <setSysTick+0x38>)
 800019c:	6812      	ldr	r2, [r2, #0]
 800019e:	fba3 1202 	umull	r1, r2, r3, r2
 80001a2:	0992      	lsrs	r2, r2, #6
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80001a4:	3a01      	subs	r2, #1
 80001a6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
  while ((msTicks - curTicks) < dlyTicks);
}

void setSysTick(){
 80001aa:	b410      	push	{r4}
 80001ac:	d20c      	bcs.n	80001c8 <setSysTick+0x30>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80001ae:	4b09      	ldr	r3, [pc, #36]	; (80001d4 <setSysTick+0x3c>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80001b0:	4809      	ldr	r0, [pc, #36]	; (80001d8 <setSysTick+0x40>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80001b2:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80001b4:	24f0      	movs	r4, #240	; 0xf0
 80001b6:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80001ba:	2100      	movs	r1, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001bc:	2207      	movs	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80001be:	6099      	str	r1, [r3, #8]
	// ---------- SysTick timer (1ms) -------- //
	if (SysTick_Config(SystemCoreClock / 1000)) {
		// Capture error
		while (1){};
	}
}
 80001c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	4770      	bx	lr
 80001c8:	e7fe      	b.n	80001c8 <setSysTick+0x30>
 80001ca:	bf00      	nop
 80001cc:	20000010 	.word	0x20000010
 80001d0:	10624dd3 	.word	0x10624dd3
 80001d4:	e000e010 	.word	0xe000e010
 80001d8:	e000ed00 	.word	0xe000ed00

080001dc <setup_Periph>:

void setup_Periph(){
 80001dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	//Enable the periph clock for USART2
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 80001e0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
		// Capture error
		while (1){};
	}
}

void setup_Periph(){
 80001e4:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	//Enable the periph clock for USART2
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 80001e6:	2101      	movs	r1, #1
 80001e8:	f000 fbc0 	bl	800096c <RCC_APB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80001ec:	4f26      	ldr	r7, [pc, #152]	; (8000288 <setup_Periph+0xac>)
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
	USART_Init(USART2, &USART_InitStructure);
 80001ee:	4e27      	ldr	r6, [pc, #156]	; (800028c <setup_Periph+0xb0>)
	NVIC_InitTypeDef NVIC_InitStructure;

	//Enable the periph clock for USART2
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
	// Enable the GPIOA clock
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80001f0:	2001      	movs	r0, #1
 80001f2:	4601      	mov	r1, r0
 80001f4:	f000 fb96 	bl	8000924 <RCC_AHB1PeriphClockCmd>

	//Setup the GPIO pins for Tx and Rx
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80001f8:	2400      	movs	r4, #0
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80001fa:	2501      	movs	r5, #1
	// Enable the GPIOA clock
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	//Setup the GPIO pins for Tx and Rx
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80001fc:	f04f 0802 	mov.w	r8, #2
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
	// Enable the GPIOA clock
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	//Setup the GPIO pins for Tx and Rx
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8000200:	f04f 090c 	mov.w	r9, #12
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000204:	4638      	mov	r0, r7
 8000206:	a902      	add	r1, sp, #8
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
	// Enable the GPIOA clock
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	//Setup the GPIO pins for Tx and Rx
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8000208:	f8cd 9008 	str.w	r9, [sp, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800020c:	f88d 800c 	strb.w	r8, [sp, #12]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000210:	f88d 800d 	strb.w	r8, [sp, #13]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000214:	f88d 400e 	strb.w	r4, [sp, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000218:	f88d 500f 	strb.w	r5, [sp, #15]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800021c:	f000 fd22 	bl	8000c64 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8000220:	4638      	mov	r0, r7
 8000222:	4641      	mov	r1, r8
 8000224:	2207      	movs	r2, #7
 8000226:	f000 fdbd 	bl	8000da4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 800022a:	4638      	mov	r0, r7
 800022c:	2207      	movs	r2, #7
 800022e:	2103      	movs	r1, #3
 8000230:	f000 fdb8 	bl	8000da4 <GPIO_PinAFConfig>

	USART_InitStructure.USART_BaudRate = 9600;
 8000234:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
	USART_Init(USART2, &USART_InitStructure);
 8000238:	4630      	mov	r0, r6
 800023a:	a904      	add	r1, sp, #16
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);

	USART_InitStructure.USART_BaudRate = 9600;
 800023c:	9304      	str	r3, [sp, #16]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800023e:	f8ad 4014 	strh.w	r4, [sp, #20]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000242:	f8ad 4016 	strh.w	r4, [sp, #22]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8000246:	f8ad 4018 	strh.w	r4, [sp, #24]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800024a:	f8ad 401c 	strh.w	r4, [sp, #28]
	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 800024e:	f8ad 901a 	strh.w	r9, [sp, #26]
	USART_Init(USART2, &USART_InitStructure);
 8000252:	f000 fe41 	bl	8000ed8 <USART_Init>

	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000256:	462a      	mov	r2, r5
 8000258:	4630      	mov	r0, r6
 800025a:	f240 5125 	movw	r1, #1317	; 0x525
 800025e:	f000 ff9b 	bl	8001198 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8000262:	2326      	movs	r3, #38	; 0x26
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8000264:	a801      	add	r0, sp, #4
	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
	USART_Init(USART2, &USART_InitStructure);

	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);

	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8000266:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800026a:	f88d 4005 	strb.w	r4, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800026e:	f88d 4006 	strb.w	r4, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000272:	f88d 5007 	strb.w	r5, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 8000276:	f000 f94b 	bl	8000510 <NVIC_Init>

	USART_Cmd(USART2, ENABLE);
 800027a:	4630      	mov	r0, r6
 800027c:	4629      	mov	r1, r5
 800027e:	f000 feb1 	bl	8000fe4 <USART_Cmd>
}
 8000282:	b009      	add	sp, #36	; 0x24
 8000284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000288:	40020000 	.word	0x40020000
 800028c:	40004400 	.word	0x40004400

08000290 <USART_puts>:

void USART_puts(USART_TypeDef *USARTx, volatile char *str){
 8000290:	b570      	push	{r4, r5, r6, lr}
	while(*str){
 8000292:	780b      	ldrb	r3, [r1, #0]
	NVIC_Init(&NVIC_InitStructure);

	USART_Cmd(USART2, ENABLE);
}

void USART_puts(USART_TypeDef *USARTx, volatile char *str){
 8000294:	460c      	mov	r4, r1
 8000296:	4606      	mov	r6, r0
	while(*str){
 8000298:	b183      	cbz	r3, 80002bc <USART_puts+0x2c>
		// while(!(USARTx->SR & 0x040));
		while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
 800029a:	4809      	ldr	r0, [pc, #36]	; (80002c0 <USART_puts+0x30>)
 800029c:	2140      	movs	r1, #64	; 0x40
 800029e:	f000 ff99 	bl	80011d4 <USART_GetFlagStatus>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	d0f9      	beq.n	800029a <USART_puts+0xa>
		USART_SendData(USARTx, *str);
 80002a6:	4625      	mov	r5, r4
 80002a8:	4630      	mov	r0, r6
 80002aa:	f815 1b01 	ldrb.w	r1, [r5], #1
 80002ae:	f000 fecd 	bl	800104c <USART_SendData>
		*str++;
 80002b2:	7823      	ldrb	r3, [r4, #0]

	USART_Cmd(USART2, ENABLE);
}

void USART_puts(USART_TypeDef *USARTx, volatile char *str){
	while(*str){
 80002b4:	7863      	ldrb	r3, [r4, #1]
 80002b6:	b10b      	cbz	r3, 80002bc <USART_puts+0x2c>
		// while(!(USARTx->SR & 0x040));
		while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
		USART_SendData(USARTx, *str);
		*str++;
 80002b8:	462c      	mov	r4, r5
 80002ba:	e7ee      	b.n	800029a <USART_puts+0xa>
 80002bc:	bd70      	pop	{r4, r5, r6, pc}
 80002be:	bf00      	nop
 80002c0:	40004400 	.word	0x40004400

080002c4 <Default_Handler>:
// This is the code that gets called when the processor receives an unexpected
// interrupt.	This simply enters an infinite loop, preserving the system state
// for examination by a debugger.
//
//*****************************************************************************
void Default_Handler(void) {
 80002c4:	e7fe      	b.n	80002c4 <Default_Handler>
 80002c6:	bf00      	nop

080002c8 <Reset_Handler>:
* Input			:
* Output		:
* Return		:
*******************************************************************************/
void Reset_Handler(void)
{
 80002c8:	4668      	mov	r0, sp
 80002ca:	f020 0107 	bic.w	r1, r0, #7
 80002ce:	468d      	mov	sp, r1
 80002d0:	b519      	push	{r0, r3, r4, lr}
	//
	// Copy the data segment initializers from flash to SRAM in ROM mode
	//
#if (__RAM_MODE__==0)
	pulSrc = &__sidata;
	for(pulDest = &__data_start__; pulDest < &__data_end__; )
 80002d2:	4913      	ldr	r1, [pc, #76]	; (8000320 <Reset_Handler+0x58>)
 80002d4:	4b13      	ldr	r3, [pc, #76]	; (8000324 <Reset_Handler+0x5c>)
 80002d6:	4299      	cmp	r1, r3
 80002d8:	d20b      	bcs.n	80002f2 <Reset_Handler+0x2a>
 80002da:	43c8      	mvns	r0, r1
 80002dc:	4418      	add	r0, r3
 80002de:	f020 0003 	bic.w	r0, r0, #3
 80002e2:	4c11      	ldr	r4, [pc, #68]	; (8000328 <Reset_Handler+0x60>)
 80002e4:	3004      	adds	r0, #4
 80002e6:	2300      	movs	r3, #0
	{
		*(pulDest++) = *(pulSrc++);
 80002e8:	58e2      	ldr	r2, [r4, r3]
 80002ea:	50ca      	str	r2, [r1, r3]
 80002ec:	3304      	adds	r3, #4
	//
	// Copy the data segment initializers from flash to SRAM in ROM mode
	//
#if (__RAM_MODE__==0)
	pulSrc = &__sidata;
	for(pulDest = &__data_start__; pulDest < &__data_end__; )
 80002ee:	4283      	cmp	r3, r0
 80002f0:	d1fa      	bne.n	80002e8 <Reset_Handler+0x20>


	//
	// Zero fill the bss segment.
	//
	for(pulDest = &__bss_start__; pulDest < &__bss_end__; )
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <Reset_Handler+0x64>)
 80002f4:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <Reset_Handler+0x68>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d20a      	bcs.n	8000310 <Reset_Handler+0x48>
 80002fa:	43d9      	mvns	r1, r3
 80002fc:	4411      	add	r1, r2
 80002fe:	f021 0103 	bic.w	r1, r1, #3
 8000302:	4419      	add	r1, r3
	{
		*(pulDest++) = 0;
 8000304:	2200      	movs	r2, #0
 8000306:	3b04      	subs	r3, #4
 8000308:	f843 2f04 	str.w	r2, [r3, #4]!


	//
	// Zero fill the bss segment.
	//
	for(pulDest = &__bss_start__; pulDest < &__bss_end__; )
 800030c:	428b      	cmp	r3, r1
 800030e:	d1fb      	bne.n	8000308 <Reset_Handler+0x40>
	//
	//	Call IEC60335 CPU register tests POST
	//
//	__ASM volatile ("bl _CPUregTestPOST \t\n");

	SystemInit();
 8000310:	f000 f848 	bl	80003a4 <SystemInit>

	//
	// Call the application's entry point.
	//
	main();
 8000314:	f000 ff96 	bl	8001244 <main>
}
 8000318:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
 800031c:	4685      	mov	sp, r0
 800031e:	4770      	bx	lr
 8000320:	20000000 	.word	0x20000000
 8000324:	20000024 	.word	0x20000024
 8000328:	080012a8 	.word	0x080012a8
 800032c:	20000024 	.word	0x20000024
 8000330:	20000038 	.word	0x20000038

08000334 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void NMI_Handler(void)
{
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop

08000338 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void HardFault_Handler(void)
{
 8000338:	e7fe      	b.n	8000338 <HardFault_Handler>
 800033a:	bf00      	nop
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void MemManage_Handler(void)
{
 800033c:	e7fe      	b.n	800033c <HardFault_Handler+0x4>
 800033e:	bf00      	nop
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void BusFault_Handler(void)
{
 8000340:	e7fe      	b.n	8000340 <HardFault_Handler+0x8>
 8000342:	bf00      	nop
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void UsageFault_Handler(void)
{
 8000344:	e7fe      	b.n	8000344 <HardFault_Handler+0xc>
 8000346:	bf00      	nop
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void SVC_Handler(void)
{
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void DebugMon_Handler(void)
{
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void PendSV_Handler(void)
{
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void SysTick_Handler(void)
{
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop

08000358 <USART2_IRQHandler>:
#define MAX_WORDLEN 10
volatile char received_str[MAX_WORDLEN + 1];
extern void USART_puts(USART_TypeDef *USARTx, volatile char *str);

//Interrupt request handler for All USART2 interrupts
void USART2_IRQHandler(void){
 8000358:	b538      	push	{r3, r4, r5, lr}

  if( USART_GetITStatus(USART2, USART_IT_RXNE)){
 800035a:	4c0f      	ldr	r4, [pc, #60]	; (8000398 <USART2_IRQHandler+0x40>)
 800035c:	f240 5125 	movw	r1, #1317	; 0x525
 8000360:	4620      	mov	r0, r4
 8000362:	f000 ff41 	bl	80011e8 <USART_GetITStatus>
 8000366:	b188      	cbz	r0, 800038c <USART2_IRQHandler+0x34>
    static int cnt = 0;
    // flag is set
    char ch = USART2->DR;
 8000368:	88a1      	ldrh	r1, [r4, #4]

    if((ch != '\n') && (cnt < MAX_WORDLEN)){
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <USART2_IRQHandler+0x44>)
void USART2_IRQHandler(void){

  if( USART_GetITStatus(USART2, USART_IT_RXNE)){
    static int cnt = 0;
    // flag is set
    char ch = USART2->DR;
 800036c:	b2c9      	uxtb	r1, r1

    if((ch != '\n') && (cnt < MAX_WORDLEN)){
 800036e:	290a      	cmp	r1, #10
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	d001      	beq.n	8000378 <USART2_IRQHandler+0x20>
 8000374:	2a09      	cmp	r2, #9
 8000376:	dd0a      	ble.n	800038e <USART2_IRQHandler+0x36>
      received_str[cnt++] = ch;
    }
    else{
      received_str[cnt] = '\0';
 8000378:	4d09      	ldr	r5, [pc, #36]	; (80003a0 <USART2_IRQHandler+0x48>)
      cnt = 0;
      USART_puts(USART2, received_str);
 800037a:	4807      	ldr	r0, [pc, #28]	; (8000398 <USART2_IRQHandler+0x40>)

    if((ch != '\n') && (cnt < MAX_WORDLEN)){
      received_str[cnt++] = ch;
    }
    else{
      received_str[cnt] = '\0';
 800037c:	2400      	movs	r4, #0
 800037e:	54ac      	strb	r4, [r5, r2]
      cnt = 0;
      USART_puts(USART2, received_str);
 8000380:	4629      	mov	r1, r5
    if((ch != '\n') && (cnt < MAX_WORDLEN)){
      received_str[cnt++] = ch;
    }
    else{
      received_str[cnt] = '\0';
      cnt = 0;
 8000382:	601c      	str	r4, [r3, #0]
      USART_puts(USART2, received_str);
    }
  }

}
 8000384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      received_str[cnt++] = ch;
    }
    else{
      received_str[cnt] = '\0';
      cnt = 0;
      USART_puts(USART2, received_str);
 8000388:	f7ff bf82 	b.w	8000290 <USART_puts>
 800038c:	bd38      	pop	{r3, r4, r5, pc}
    static int cnt = 0;
    // flag is set
    char ch = USART2->DR;

    if((ch != '\n') && (cnt < MAX_WORDLEN)){
      received_str[cnt++] = ch;
 800038e:	4c04      	ldr	r4, [pc, #16]	; (80003a0 <USART2_IRQHandler+0x48>)
 8000390:	54a1      	strb	r1, [r4, r2]
 8000392:	1c50      	adds	r0, r2, #1
 8000394:	6018      	str	r0, [r3, #0]
 8000396:	bd38      	pop	{r3, r4, r5, pc}
 8000398:	40004400 	.word	0x40004400
 800039c:	20000024 	.word	0x20000024
 80003a0:	2000002c 	.word	0x2000002c

080003a4 <SystemInit>:
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003a4:	4b35      	ldr	r3, [pc, #212]	; (800047c <SystemInit+0xd8>)

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003a6:	4836      	ldr	r0, [pc, #216]	; (8000480 <SystemInit+0xdc>)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003a8:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003aa:	2200      	movs	r2, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003ac:	f041 0101 	orr.w	r1, r1, #1
 80003b0:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003b2:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003b4:	6819      	ldr	r1, [r3, #0]
 80003b6:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80003ba:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80003be:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003c0:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003c2:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003c4:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003c6:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80003ca:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80003cc:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80003ce:	9200      	str	r2, [sp, #0]
 80003d0:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80003d2:	681a      	ldr	r2, [r3, #0]
 80003d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80003d8:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80003da:	461a      	mov	r2, r3
 80003dc:	e003      	b.n	80003e6 <SystemInit+0x42>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80003de:	9b00      	ldr	r3, [sp, #0]
 80003e0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80003e4:	d009      	beq.n	80003fa <SystemInit+0x56>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80003e6:	6813      	ldr	r3, [r2, #0]
 80003e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ec:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 80003ee:	9b00      	ldr	r3, [sp, #0]
 80003f0:	3301      	adds	r3, #1
 80003f2:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80003f4:	9b01      	ldr	r3, [sp, #4]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d0f1      	beq.n	80003de <SystemInit+0x3a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80003fa:	4b20      	ldr	r3, [pc, #128]	; (800047c <SystemInit+0xd8>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000402:	bf18      	it	ne
 8000404:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000406:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000408:	9b01      	ldr	r3, [sp, #4]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d005      	beq.n	800041a <SystemInit+0x76>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800040e:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <SystemInit+0xe0>)
 8000410:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000414:	609a      	str	r2, [r3, #8]
#endif
}
 8000416:	b002      	add	sp, #8
 8000418:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800041a:	4b18      	ldr	r3, [pc, #96]	; (800047c <SystemInit+0xd8>)
    PWR->CR |= PWR_CR_VOS;
 800041c:	4a1a      	ldr	r2, [pc, #104]	; (8000488 <SystemInit+0xe4>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800041e:	6c18      	ldr	r0, [r3, #64]	; 0x40
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000420:	491a      	ldr	r1, [pc, #104]	; (800048c <SystemInit+0xe8>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000422:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000426:	6418      	str	r0, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000428:	6810      	ldr	r0, [r2, #0]
 800042a:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 800042e:	6010      	str	r0, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000430:	689a      	ldr	r2, [r3, #8]
 8000432:	609a      	str	r2, [r3, #8]

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000434:	689a      	ldr	r2, [r3, #8]
 8000436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800043a:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800043c:	689a      	ldr	r2, [r3, #8]
 800043e:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000442:	609a      	str	r2, [r3, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000444:	6059      	str	r1, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800044c:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800044e:	4619      	mov	r1, r3
 8000450:	680b      	ldr	r3, [r1, #0]
 8000452:	4a0a      	ldr	r2, [pc, #40]	; (800047c <SystemInit+0xd8>)
 8000454:	019b      	lsls	r3, r3, #6
 8000456:	d5fb      	bpl.n	8000450 <SystemInit+0xac>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000458:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <SystemInit+0xec>)
 800045a:	f240 7105 	movw	r1, #1797	; 0x705
 800045e:	6019      	str	r1, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000460:	6893      	ldr	r3, [r2, #8]
 8000462:	f023 0303 	bic.w	r3, r3, #3
 8000466:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000468:	6893      	ldr	r3, [r2, #8]
 800046a:	f043 0302 	orr.w	r3, r3, #2
 800046e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000470:	6893      	ldr	r3, [r2, #8]
 8000472:	f003 030c 	and.w	r3, r3, #12
 8000476:	2b08      	cmp	r3, #8
 8000478:	d1fa      	bne.n	8000470 <SystemInit+0xcc>
 800047a:	e7c8      	b.n	800040e <SystemInit+0x6a>
 800047c:	40023800 	.word	0x40023800
 8000480:	24003010 	.word	0x24003010
 8000484:	e000ed00 	.word	0xe000ed00
 8000488:	40007000 	.word	0x40007000
 800048c:	07405408 	.word	0x07405408
 8000490:	40023c00 	.word	0x40023c00

08000494 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <SystemCoreClockUpdate+0x58>)
 8000496:	689a      	ldr	r2, [r3, #8]
 8000498:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 800049c:	2a04      	cmp	r2, #4
 800049e:	d023      	beq.n	80004e8 <SystemCoreClockUpdate+0x54>
 80004a0:	2a08      	cmp	r2, #8
 80004a2:	d009      	beq.n	80004b8 <SystemCoreClockUpdate+0x24>
 80004a4:	4a12      	ldr	r2, [pc, #72]	; (80004f0 <SystemCoreClockUpdate+0x5c>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80004a6:	4911      	ldr	r1, [pc, #68]	; (80004ec <SystemCoreClockUpdate+0x58>)
 80004a8:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <SystemCoreClockUpdate+0x60>)
 80004aa:	6889      	ldr	r1, [r1, #8]
 80004ac:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80004b0:	5c59      	ldrb	r1, [r3, r1]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80004b2:	40ca      	lsrs	r2, r1
 80004b4:	611a      	str	r2, [r3, #16]
 80004b6:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80004b8:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004ba:	6859      	ldr	r1, [r3, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004bc:	685b      	ldr	r3, [r3, #4]
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 80004be:	0242      	lsls	r2, r0, #9
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004c0:	bf4c      	ite	mi
 80004c2:	4a0d      	ldrmi	r2, [pc, #52]	; (80004f8 <SystemCoreClockUpdate+0x64>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80004c4:	4a0a      	ldrpl	r2, [pc, #40]	; (80004f0 <SystemCoreClockUpdate+0x5c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004c6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80004ca:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80004ce:	fbb2 f2f1 	udiv	r2, r2, r1
 80004d2:	fb02 f203 	mul.w	r2, r2, r3
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80004d6:	4b05      	ldr	r3, [pc, #20]	; (80004ec <SystemCoreClockUpdate+0x58>)
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80004de:	3301      	adds	r3, #1
 80004e0:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 80004e2:	fbb2 f2f3 	udiv	r2, r2, r3
      break;
 80004e6:	e7de      	b.n	80004a6 <SystemCoreClockUpdate+0x12>
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 80004e8:	4a03      	ldr	r2, [pc, #12]	; (80004f8 <SystemCoreClockUpdate+0x64>)
 80004ea:	e7dc      	b.n	80004a6 <SystemCoreClockUpdate+0x12>
 80004ec:	40023800 	.word	0x40023800
 80004f0:	00f42400 	.word	0x00f42400
 80004f4:	20000000 	.word	0x20000000
 80004f8:	007a1200 	.word	0x007a1200

080004fc <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80004fc:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000500:	4b02      	ldr	r3, [pc, #8]	; (800050c <NVIC_PriorityGroupConfig+0x10>)
 8000502:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000506:	60d8      	str	r0, [r3, #12]
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	e000ed00 	.word	0xe000ed00

08000510 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000510:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000512:	b4f0      	push	{r4, r5, r6, r7}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000514:	b963      	cbnz	r3, 8000530 <NVIC_Init+0x20>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000516:	7803      	ldrb	r3, [r0, #0]
 8000518:	4a19      	ldr	r2, [pc, #100]	; (8000580 <NVIC_Init+0x70>)
 800051a:	0959      	lsrs	r1, r3, #5
 800051c:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800051e:	f003 031f 	and.w	r3, r3, #31
 8000522:	2001      	movs	r0, #1
 8000524:	fa00 f303 	lsl.w	r3, r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000528:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800052c:	bcf0      	pop	{r4, r5, r6, r7}
 800052e:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000530:	4b14      	ldr	r3, [pc, #80]	; (8000584 <NVIC_Init+0x74>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000532:	7847      	ldrb	r7, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000534:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000536:	7885      	ldrb	r5, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000538:	7803      	ldrb	r3, [r0, #0]
 800053a:	4911      	ldr	r1, [pc, #68]	; (8000580 <NVIC_Init+0x70>)
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800053c:	43d2      	mvns	r2, r2
 800053e:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 8000542:	f1c2 0404 	rsb	r4, r2, #4
    tmpsub = tmpsub >> tmppriority;
 8000546:	260f      	movs	r6, #15

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000548:	b2e4      	uxtb	r4, r4
 800054a:	fa07 f404 	lsl.w	r4, r7, r4
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 800054e:	fa46 f202 	asr.w	r2, r6, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000552:	b2e4      	uxtb	r4, r4
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000554:	402a      	ands	r2, r5
 8000556:	4322      	orrs	r2, r4
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000558:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800055c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 8000560:	0112      	lsls	r2, r2, #4
 8000562:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000568:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800056a:	2001      	movs	r0, #1
 800056c:	f003 021f 	and.w	r2, r3, #31
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000570:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000572:	fa00 f202 	lsl.w	r2, r0, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800057a:	bcf0      	pop	{r4, r5, r6, r7}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	e000e100 	.word	0xe000e100
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000588:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 800058c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8000590:	4b01      	ldr	r3, [pc, #4]	; (8000598 <NVIC_SetVectorTable+0x10>)
 8000592:	4308      	orrs	r0, r1
 8000594:	6098      	str	r0, [r3, #8]
 8000596:	4770      	bx	lr
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <NVIC_SystemLPConfig+0x14>)
 800059e:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80005a0:	b919      	cbnz	r1, 80005aa <NVIC_SystemLPConfig+0xe>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80005a2:	ea22 0000 	bic.w	r0, r2, r0
 80005a6:	6118      	str	r0, [r3, #16]
 80005a8:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80005aa:	4310      	orrs	r0, r2
 80005ac:	6118      	str	r0, [r3, #16]
 80005ae:	4770      	bx	lr
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <SysTick_CLKSourceConfig+0x14>)
 80005b6:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80005b8:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80005ba:	bf0c      	ite	eq
 80005bc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80005c0:	f022 0204 	bicne.w	r2, r2, #4
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	4770      	bx	lr
 80005c8:	e000e010 	.word	0xe000e010

080005cc <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <RCC_DeInit+0x40>)

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80005ce:	4810      	ldr	r0, [pc, #64]	; (8000610 <RCC_DeInit+0x44>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005d0:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005d2:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005d4:	f041 0101 	orr.w	r1, r1, #1
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80005d8:	b430      	push	{r4, r5}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005da:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80005de:	6819      	ldr	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005e0:	4d0c      	ldr	r5, [pc, #48]	; (8000614 <RCC_DeInit+0x48>)

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80005e2:	4c0d      	ldr	r4, [pc, #52]	; (8000618 <RCC_DeInit+0x4c>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80005e4:	f021 51a8 	bic.w	r1, r1, #352321536	; 0x15000000
 80005e8:	f421 2110 	bic.w	r1, r1, #589824	; 0x90000
 80005ec:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005ee:	605d      	str	r5, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80005f0:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80005f4:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005f8:	6819      	ldr	r1, [r3, #0]
 80005fa:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80005fe:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 

}
 8000600:	bc30      	pop	{r4, r5}
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000602:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 
 8000604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	24003000 	.word	0x24003000
 8000614:	24003010 	.word	0x24003010
 8000618:	20003000 	.word	0x20003000

0800061c <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800061c:	4b02      	ldr	r3, [pc, #8]	; (8000628 <RCC_HSEConfig+0xc>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000622:	7018      	strb	r0, [r3, #0]
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40023802 	.word	0x40023802

0800062c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800062c:	b082      	sub	sp, #8
  __IO uint32_t startupcounter = 0;
 800062e:	2300      	movs	r3, #0

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000630:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <RCC_WaitForHSEStartUp+0x34>)
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 8000632:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000634:	6813      	ldr	r3, [r2, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000636:	039b      	lsls	r3, r3, #14
 8000638:	d40c      	bmi.n	8000654 <RCC_WaitForHSEStartUp+0x28>
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 800063a:	9b01      	ldr	r3, [sp, #4]
 800063c:	3301      	adds	r3, #1
 800063e:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000640:	9b01      	ldr	r3, [sp, #4]
 8000642:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000646:	d1f5      	bne.n	8000634 <RCC_WaitForHSEStartUp+0x8>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <RCC_WaitForHSEStartUp+0x34>)
 800064a:	6818      	ldr	r0, [r3, #0]
  }
  else
  {
    status = ERROR;
  }
  return (status);
 800064c:	f3c0 4040 	ubfx	r0, r0, #17, #1
}
 8000650:	b002      	add	sp, #8
 8000652:	4770      	bx	lr
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8000654:	9b01      	ldr	r3, [sp, #4]
 8000656:	3301      	adds	r3, #1
 8000658:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800065a:	9b01      	ldr	r3, [sp, #4]
 800065c:	e7f4      	b.n	8000648 <RCC_WaitForHSEStartUp+0x1c>
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800

08000664 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <RCC_AdjustHSICalibrationValue+0x10>)
 8000666:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000668:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800066c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8000670:	6018      	str	r0, [r3, #0]
 8000672:	4770      	bx	lr
 8000674:	40023800 	.word	0x40023800

08000678 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000678:	4b01      	ldr	r3, [pc, #4]	; (8000680 <RCC_HSICmd+0x8>)
 800067a:	6018      	str	r0, [r3, #0]
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	42470000 	.word	0x42470000

08000684 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <RCC_LSEConfig+0x1c>)
 8000686:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000688:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800068a:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800068c:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 800068e:	d005      	beq.n	800069c <RCC_LSEConfig+0x18>
 8000690:	2804      	cmp	r0, #4
 8000692:	d102      	bne.n	800069a <RCC_LSEConfig+0x16>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000694:	2205      	movs	r2, #5
 8000696:	701a      	strb	r2, [r3, #0]
 8000698:	4770      	bx	lr
 800069a:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800069c:	7018      	strb	r0, [r3, #0]
      break;
 800069e:	4770      	bx	lr
 80006a0:	40023870 	.word	0x40023870

080006a4 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80006a4:	4b01      	ldr	r3, [pc, #4]	; (80006ac <RCC_LSICmd+0x8>)
 80006a6:	6018      	str	r0, [r3, #0]
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	42470e80 	.word	0x42470e80

080006b0 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 80006b0:	b430      	push	{r4, r5}
 80006b2:	9c02      	ldr	r4, [sp, #8]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80006b4:	4d06      	ldr	r5, [pc, #24]	; (80006d0 <RCC_PLLConfig+0x20>)
 80006b6:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 80006ba:	085b      	lsrs	r3, r3, #1
 80006bc:	4301      	orrs	r1, r0
 80006be:	3b01      	subs	r3, #1
 80006c0:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 80006c4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80006c8:	606b      	str	r3, [r5, #4]
                 (PLLQ << 24);
}
 80006ca:	bc30      	pop	{r4, r5}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800

080006d4 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80006d4:	4b01      	ldr	r3, [pc, #4]	; (80006dc <RCC_PLLCmd+0x8>)
 80006d6:	6018      	str	r0, [r3, #0]
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	42470060 	.word	0x42470060

080006e0 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 80006e0:	0709      	lsls	r1, r1, #28
 80006e2:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <RCC_PLLI2SConfig+0x10>)
 80006e4:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 80006e8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 80006f4:	4b01      	ldr	r3, [pc, #4]	; (80006fc <RCC_PLLI2SCmd+0x8>)
 80006f6:	6018      	str	r0, [r3, #0]
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	42470068 	.word	0x42470068

08000700 <RCC_PLLSAIConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 8000700:	0712      	lsls	r2, r2, #28
 8000702:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8000706:	4b03      	ldr	r3, [pc, #12]	; (8000714 <RCC_PLLSAIConfig+0x14>)
 8000708:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 800070c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <RCC_PLLSAICmd>:
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 8000718:	4b01      	ldr	r3, [pc, #4]	; (8000720 <RCC_PLLSAICmd+0x8>)
 800071a:	6018      	str	r0, [r3, #0]
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	42470070 	.word	0x42470070

08000724 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000724:	4b01      	ldr	r3, [pc, #4]	; (800072c <RCC_ClockSecuritySystemCmd+0x8>)
 8000726:	6018      	str	r0, [r3, #0]
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	4247004c 	.word	0x4247004c

08000730 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <RCC_MCO1Config+0x10>)
 8000732:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8000734:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8000738:	4311      	orrs	r1, r2
 800073a:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800073c:	6098      	str	r0, [r3, #8]
 800073e:	4770      	bx	lr
 8000740:	40023800 	.word	0x40023800

08000744 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <RCC_MCO2Config+0x10>)
 8000746:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8000748:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800074c:	4311      	orrs	r1, r2
 800074e:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000750:	6098      	str	r0, [r3, #8]
 8000752:	4770      	bx	lr
 8000754:	40023800 	.word	0x40023800

08000758 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000758:	4b03      	ldr	r3, [pc, #12]	; (8000768 <RCC_SYSCLKConfig+0x10>)
 800075a:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800075c:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000760:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000762:	6098      	str	r0, [r3, #8]
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800076c:	4b02      	ldr	r3, [pc, #8]	; (8000778 <RCC_GetSYSCLKSource+0xc>)
 800076e:	6898      	ldr	r0, [r3, #8]
}
 8000770:	f000 000c 	and.w	r0, r0, #12
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800

0800077c <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <RCC_HCLKConfig+0x10>)
 800077e:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000780:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000784:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000786:	6098      	str	r0, [r3, #8]
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <RCC_PCLK1Config+0x10>)
 8000792:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000794:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000798:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800079a:	6098      	str	r0, [r3, #8]
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <RCC_PCLK2Config+0x10>)
 80007a6:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80007a8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80007ac:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80007b0:	6098      	str	r0, [r3, #8]
 80007b2:	4770      	bx	lr
 80007b4:	40023800 	.word	0x40023800

080007b8 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80007b8:	4a1f      	ldr	r2, [pc, #124]	; (8000838 <RCC_GetClocksFreq+0x80>)
 80007ba:	6893      	ldr	r3, [r2, #8]
 80007bc:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 80007c0:	2b04      	cmp	r3, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80007c2:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 80007c4:	d01b      	beq.n	80007fe <RCC_GetClocksFreq+0x46>
 80007c6:	2b08      	cmp	r3, #8
 80007c8:	d01c      	beq.n	8000804 <RCC_GetClocksFreq+0x4c>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <RCC_GetClocksFreq+0x84>)
 80007cc:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80007ce:	491a      	ldr	r1, [pc, #104]	; (8000838 <RCC_GetClocksFreq+0x80>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <RCC_GetClocksFreq+0x88>)
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80007d2:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 4;
 80007d4:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 80007d8:	5d14      	ldrb	r4, [r2, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80007da:	40e3      	lsrs	r3, r4
 80007dc:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80007de:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 80007e0:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 80007e4:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80007e6:	fa23 f404 	lsr.w	r4, r3, r4
 80007ea:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80007ec:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
  presc = APBAHBPrescTable[tmp];
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
}
 80007ee:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
  tmp = tmp >> 13;
 80007f2:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 80007f6:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80007f8:	40d3      	lsrs	r3, r2
 80007fa:	60c3      	str	r3, [r0, #12]
}
 80007fc:	4770      	bx	lr
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <RCC_GetClocksFreq+0x8c>)
 8000800:	6003      	str	r3, [r0, #0]
      break;
 8000802:	e7e4      	b.n	80007ce <RCC_GetClocksFreq+0x16>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000804:	6854      	ldr	r4, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000806:	6851      	ldr	r1, [r2, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000808:	6852      	ldr	r2, [r2, #4]
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 800080a:	0263      	lsls	r3, r4, #9
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800080c:	bf4c      	ite	mi
 800080e:	4b0d      	ldrmi	r3, [pc, #52]	; (8000844 <RCC_GetClocksFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000810:	4b0a      	ldrpl	r3, [pc, #40]	; (800083c <RCC_GetClocksFreq+0x84>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000812:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000816:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800081a:	fbb3 f3f1 	udiv	r3, r3, r1
 800081e:	fb03 f302 	mul.w	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <RCC_GetClocksFreq+0x80>)
 8000824:	6852      	ldr	r2, [r2, #4]
 8000826:	f3c2 4201 	ubfx	r2, r2, #16, #2
 800082a:	3201      	adds	r2, #1
 800082c:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800082e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000832:	6003      	str	r3, [r0, #0]
      break;
 8000834:	e7cb      	b.n	80007ce <RCC_GetClocksFreq+0x16>
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	00f42400 	.word	0x00f42400
 8000840:	20000014 	.word	0x20000014
 8000844:	007a1200 	.word	0x007a1200

08000848 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8000848:	f400 7340 	and.w	r3, r0, #768	; 0x300
 800084c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000850:	d109      	bne.n	8000866 <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <RCC_RTCCLKConfig+0x2c>)
 8000854:	6891      	ldr	r1, [r2, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000856:	f020 4370 	bic.w	r3, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 800085a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800085e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000862:	430b      	orrs	r3, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8000864:	6093      	str	r3, [r2, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8000866:	4b03      	ldr	r3, [pc, #12]	; (8000874 <RCC_RTCCLKConfig+0x2c>)
 8000868:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800086a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800086e:	4310      	orrs	r0, r2
 8000870:	6718      	str	r0, [r3, #112]	; 0x70
 8000872:	4770      	bx	lr
 8000874:	40023800 	.word	0x40023800

08000878 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000878:	4b01      	ldr	r3, [pc, #4]	; (8000880 <RCC_RTCCLKCmd+0x8>)
 800087a:	6018      	str	r0, [r3, #0]
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	42470e3c 	.word	0x42470e3c

08000884 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000884:	4b01      	ldr	r3, [pc, #4]	; (800088c <RCC_BackupResetCmd+0x8>)
 8000886:	6018      	str	r0, [r3, #0]
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	42470e40 	.word	0x42470e40

08000890 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8000890:	4b01      	ldr	r3, [pc, #4]	; (8000898 <RCC_I2SCLKConfig+0x8>)
 8000892:	6018      	str	r0, [r3, #0]
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	4247015c 	.word	0x4247015c

0800089c <RCC_SAIPLLI2SClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <RCC_SAIPLLI2SClkDivConfig+0x14>)
 800089e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 80008a2:	3801      	subs	r0, #1
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 80008a4:	f022 021f 	bic.w	r2, r2, #31

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 80008a8:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 80008aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80008ae:	4770      	bx	lr
 80008b0:	40023800 	.word	0x40023800

080008b4 <RCC_SAIPLLSAIClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <RCC_SAIPLLSAIClkDivConfig+0x18>)
 80008b6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 80008ba:	3801      	subs	r0, #1
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 80008bc:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 80008c0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 80008c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <RCC_SAIBlockACLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <RCC_SAIBlockACLKConfig+0x14>)
 80008d2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 80008d6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 80008da:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 80008dc:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <RCC_SAIBlockBCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <RCC_SAIBlockBCLKConfig+0x14>)
 80008ea:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 80008ee:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 80008f2:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 80008f4:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <RCC_LTDCCLKDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <RCC_LTDCCLKDivConfig+0x14>)
 8000902:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 8000906:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 800090a:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800090c:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800

08000918 <RCC_TIMCLKPresConfig>:
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 8000918:	4b01      	ldr	r3, [pc, #4]	; (8000920 <RCC_TIMCLKPresConfig+0x8>)
 800091a:	6018      	str	r0, [r3, #0]
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	424711e0 	.word	0x424711e0

08000924 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <RCC_AHB1PeriphClockCmd+0x14>)
 8000926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000928:	b919      	cbnz	r1, 8000932 <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800092a:	ea22 0000 	bic.w	r0, r2, r0
 800092e:	6318      	str	r0, [r3, #48]	; 0x30
 8000930:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000932:	4310      	orrs	r0, r2
 8000934:	6318      	str	r0, [r3, #48]	; 0x30
 8000936:	4770      	bx	lr
 8000938:	40023800 	.word	0x40023800

0800093c <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <RCC_AHB2PeriphClockCmd+0x14>)
 800093e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000940:	b919      	cbnz	r1, 800094a <RCC_AHB2PeriphClockCmd+0xe>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8000942:	ea22 0000 	bic.w	r0, r2, r0
 8000946:	6358      	str	r0, [r3, #52]	; 0x34
 8000948:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800094a:	4310      	orrs	r0, r2
 800094c:	6358      	str	r0, [r3, #52]	; 0x34
 800094e:	4770      	bx	lr
 8000950:	40023800 	.word	0x40023800

08000954 <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <RCC_AHB3PeriphClockCmd+0x14>)
 8000956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000958:	b919      	cbnz	r1, 8000962 <RCC_AHB3PeriphClockCmd+0xe>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800095a:	ea22 0000 	bic.w	r0, r2, r0
 800095e:	6398      	str	r0, [r3, #56]	; 0x38
 8000960:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000962:	4310      	orrs	r0, r2
 8000964:	6398      	str	r0, [r3, #56]	; 0x38
 8000966:	4770      	bx	lr
 8000968:	40023800 	.word	0x40023800

0800096c <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <RCC_APB1PeriphClockCmd+0x14>)
 800096e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000970:	b919      	cbnz	r1, 800097a <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000972:	ea22 0000 	bic.w	r0, r2, r0
 8000976:	6418      	str	r0, [r3, #64]	; 0x40
 8000978:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800097a:	4310      	orrs	r0, r2
 800097c:	6418      	str	r0, [r3, #64]	; 0x40
 800097e:	4770      	bx	lr
 8000980:	40023800 	.word	0x40023800

08000984 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <RCC_APB2PeriphClockCmd+0x14>)
 8000986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000988:	b919      	cbnz	r1, 8000992 <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800098a:	ea22 0000 	bic.w	r0, r2, r0
 800098e:	6458      	str	r0, [r3, #68]	; 0x44
 8000990:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000992:	4310      	orrs	r0, r2
 8000994:	6458      	str	r0, [r3, #68]	; 0x44
 8000996:	4770      	bx	lr
 8000998:	40023800 	.word	0x40023800

0800099c <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <RCC_AHB1PeriphResetCmd+0x14>)
 800099e:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009a0:	b919      	cbnz	r1, 80009aa <RCC_AHB1PeriphResetCmd+0xe>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 80009a2:	ea22 0000 	bic.w	r0, r2, r0
 80009a6:	6118      	str	r0, [r3, #16]
 80009a8:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80009aa:	4310      	orrs	r0, r2
 80009ac:	6118      	str	r0, [r3, #16]
 80009ae:	4770      	bx	lr
 80009b0:	40023800 	.word	0x40023800

080009b4 <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <RCC_AHB2PeriphResetCmd+0x14>)
 80009b6:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009b8:	b919      	cbnz	r1, 80009c2 <RCC_AHB2PeriphResetCmd+0xe>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 80009ba:	ea22 0000 	bic.w	r0, r2, r0
 80009be:	6158      	str	r0, [r3, #20]
 80009c0:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80009c2:	4310      	orrs	r0, r2
 80009c4:	6158      	str	r0, [r3, #20]
 80009c6:	4770      	bx	lr
 80009c8:	40023800 	.word	0x40023800

080009cc <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <RCC_AHB3PeriphResetCmd+0x14>)
 80009ce:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009d0:	b919      	cbnz	r1, 80009da <RCC_AHB3PeriphResetCmd+0xe>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 80009d2:	ea22 0000 	bic.w	r0, r2, r0
 80009d6:	6198      	str	r0, [r3, #24]
 80009d8:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 80009da:	4310      	orrs	r0, r2
 80009dc:	6198      	str	r0, [r3, #24]
 80009de:	4770      	bx	lr
 80009e0:	40023800 	.word	0x40023800

080009e4 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <RCC_APB1PeriphResetCmd+0x14>)
 80009e6:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009e8:	b919      	cbnz	r1, 80009f2 <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80009ea:	ea22 0000 	bic.w	r0, r2, r0
 80009ee:	6218      	str	r0, [r3, #32]
 80009f0:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80009f2:	4310      	orrs	r0, r2
 80009f4:	6218      	str	r0, [r3, #32]
 80009f6:	4770      	bx	lr
 80009f8:	40023800 	.word	0x40023800

080009fc <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <RCC_APB2PeriphResetCmd+0x14>)
 80009fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a00:	b919      	cbnz	r1, 8000a0a <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000a02:	ea22 0000 	bic.w	r0, r2, r0
 8000a06:	6258      	str	r0, [r3, #36]	; 0x24
 8000a08:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000a0a:	4310      	orrs	r0, r2
 8000a0c:	6258      	str	r0, [r3, #36]	; 0x24
 8000a0e:	4770      	bx	lr
 8000a10:	40023800 	.word	0x40023800

08000a14 <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
 8000a16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a18:	b919      	cbnz	r1, 8000a22 <RCC_AHB1PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8000a1a:	ea22 0000 	bic.w	r0, r2, r0
 8000a1e:	6518      	str	r0, [r3, #80]	; 0x50
 8000a20:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000a22:	4310      	orrs	r0, r2
 8000a24:	6518      	str	r0, [r3, #80]	; 0x50
 8000a26:	4770      	bx	lr
 8000a28:	40023800 	.word	0x40023800

08000a2c <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
 8000a2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a30:	b919      	cbnz	r1, 8000a3a <RCC_AHB2PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8000a32:	ea22 0000 	bic.w	r0, r2, r0
 8000a36:	6558      	str	r0, [r3, #84]	; 0x54
 8000a38:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000a3a:	4310      	orrs	r0, r2
 8000a3c:	6558      	str	r0, [r3, #84]	; 0x54
 8000a3e:	4770      	bx	lr
 8000a40:	40023800 	.word	0x40023800

08000a44 <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
 8000a46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a48:	b919      	cbnz	r1, 8000a52 <RCC_AHB3PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8000a4a:	ea22 0000 	bic.w	r0, r2, r0
 8000a4e:	6598      	str	r0, [r3, #88]	; 0x58
 8000a50:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000a52:	4310      	orrs	r0, r2
 8000a54:	6598      	str	r0, [r3, #88]	; 0x58
 8000a56:	4770      	bx	lr
 8000a58:	40023800 	.word	0x40023800

08000a5c <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <RCC_APB1PeriphClockLPModeCmd+0x14>)
 8000a5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a60:	b919      	cbnz	r1, 8000a6a <RCC_APB1PeriphClockLPModeCmd+0xe>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8000a62:	ea22 0000 	bic.w	r0, r2, r0
 8000a66:	6618      	str	r0, [r3, #96]	; 0x60
 8000a68:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000a6a:	4310      	orrs	r0, r2
 8000a6c:	6618      	str	r0, [r3, #96]	; 0x60
 8000a6e:	4770      	bx	lr
 8000a70:	40023800 	.word	0x40023800

08000a74 <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <RCC_APB2PeriphClockLPModeCmd+0x14>)
 8000a76:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a78:	b919      	cbnz	r1, 8000a82 <RCC_APB2PeriphClockLPModeCmd+0xe>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8000a7a:	ea22 0000 	bic.w	r0, r2, r0
 8000a7e:	6658      	str	r0, [r3, #100]	; 0x64
 8000a80:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000a82:	4310      	orrs	r0, r2
 8000a84:	6658      	str	r0, [r3, #100]	; 0x64
 8000a86:	4770      	bx	lr
 8000a88:	40023800 	.word	0x40023800

08000a8c <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <RCC_ITConfig+0x14>)
 8000a8e:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a90:	b919      	cbnz	r1, 8000a9a <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8000a92:	ea22 0000 	bic.w	r0, r2, r0
 8000a96:	7018      	strb	r0, [r3, #0]
 8000a98:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000a9a:	4310      	orrs	r0, r2
 8000a9c:	7018      	strb	r0, [r3, #0]
 8000a9e:	4770      	bx	lr
 8000aa0:	4002380d 	.word	0x4002380d

08000aa4 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000aa4:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d00b      	beq.n	8000ac2 <RCC_GetFlagStatus+0x1e>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000aaa:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <RCC_GetFlagStatus+0x30>)
 8000aae:	bf0c      	ite	eq
 8000ab0:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000ab2:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000ab4:	f000 001f 	and.w	r0, r0, #31
 8000ab8:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8000abc:	f000 0001 	and.w	r0, r0, #1
 8000ac0:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000ac2:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <RCC_GetFlagStatus+0x30>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000ac6:	f000 001f 	and.w	r0, r0, #31
 8000aca:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8000ace:	f000 0001 	and.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000ad8:	4b02      	ldr	r3, [pc, #8]	; (8000ae4 <RCC_ClearFlag+0xc>)
 8000ada:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000adc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000ae0:	675a      	str	r2, [r3, #116]	; 0x74
 8000ae2:	4770      	bx	lr
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <RCC_GetITStatus+0x10>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8000aee:	bf0c      	ite	eq
 8000af0:	2000      	moveq	r0, #0
 8000af2:	2001      	movne	r0, #1
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000afc:	4b01      	ldr	r3, [pc, #4]	; (8000b04 <RCC_ClearITPendingBit+0x8>)
 8000afe:	7018      	strb	r0, [r3, #0]
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	4002380e 	.word	0x4002380e

08000b08 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000b08:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8000b0a:	4b4b      	ldr	r3, [pc, #300]	; (8000c38 <GPIO_DeInit+0x130>)
 8000b0c:	4298      	cmp	r0, r3
 8000b0e:	d02a      	beq.n	8000b66 <GPIO_DeInit+0x5e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 8000b10:	4b4a      	ldr	r3, [pc, #296]	; (8000c3c <GPIO_DeInit+0x134>)
 8000b12:	4298      	cmp	r0, r3
 8000b14:	d031      	beq.n	8000b7a <GPIO_DeInit+0x72>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8000b16:	4b4a      	ldr	r3, [pc, #296]	; (8000c40 <GPIO_DeInit+0x138>)
 8000b18:	4298      	cmp	r0, r3
 8000b1a:	d038      	beq.n	8000b8e <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8000b1c:	4b49      	ldr	r3, [pc, #292]	; (8000c44 <GPIO_DeInit+0x13c>)
 8000b1e:	4298      	cmp	r0, r3
 8000b20:	d03f      	beq.n	8000ba2 <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 8000b22:	4b49      	ldr	r3, [pc, #292]	; (8000c48 <GPIO_DeInit+0x140>)
 8000b24:	4298      	cmp	r0, r3
 8000b26:	d046      	beq.n	8000bb6 <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 8000b28:	4b48      	ldr	r3, [pc, #288]	; (8000c4c <GPIO_DeInit+0x144>)
 8000b2a:	4298      	cmp	r0, r3
 8000b2c:	d04d      	beq.n	8000bca <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 8000b2e:	4b48      	ldr	r3, [pc, #288]	; (8000c50 <GPIO_DeInit+0x148>)
 8000b30:	4298      	cmp	r0, r3
 8000b32:	d054      	beq.n	8000bde <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 8000b34:	4b47      	ldr	r3, [pc, #284]	; (8000c54 <GPIO_DeInit+0x14c>)
 8000b36:	4298      	cmp	r0, r3
 8000b38:	d05b      	beq.n	8000bf2 <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }

  else if (GPIOx == GPIOI)
 8000b3a:	4b47      	ldr	r3, [pc, #284]	; (8000c58 <GPIO_DeInit+0x150>)
 8000b3c:	4298      	cmp	r0, r3
 8000b3e:	d062      	beq.n	8000c06 <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
 8000b40:	4b46      	ldr	r3, [pc, #280]	; (8000c5c <GPIO_DeInit+0x154>)
 8000b42:	4298      	cmp	r0, r3
 8000b44:	d06b      	beq.n	8000c1e <GPIO_DeInit+0x116>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOK)
 8000b46:	4b46      	ldr	r3, [pc, #280]	; (8000c60 <GPIO_DeInit+0x158>)
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	d000      	beq.n	8000b4e <GPIO_DeInit+0x46>
 8000b4c:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 8000b4e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b52:	2101      	movs	r1, #1
 8000b54:	f7ff ff22 	bl	800099c <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 8000b58:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b5c:	2100      	movs	r1, #0
    }
  }
}
 8000b5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOK)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 8000b62:	f7ff bf1b 	b.w	800099c <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000b66:	2001      	movs	r0, #1
 8000b68:	4601      	mov	r1, r0
 8000b6a:	f7ff ff17 	bl	800099c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000b72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000b76:	f7ff bf11 	b.w	800099c <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	f7ff ff0d 	bl	800099c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8000b82:	2002      	movs	r0, #2
 8000b84:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000b86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8000b8a:	f7ff bf07 	b.w	800099c <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000b8e:	2004      	movs	r0, #4
 8000b90:	2101      	movs	r1, #1
 8000b92:	f7ff ff03 	bl	800099c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8000b96:	2004      	movs	r0, #4
 8000b98:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000b9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8000b9e:	f7ff befd 	b.w	800099c <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000ba2:	2008      	movs	r0, #8
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	f7ff fef9 	bl	800099c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8000baa:	2008      	movs	r0, #8
 8000bac:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000bae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8000bb2:	f7ff bef3 	b.w	800099c <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000bb6:	2010      	movs	r0, #16
 8000bb8:	2101      	movs	r1, #1
 8000bba:	f7ff feef 	bl	800099c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000bbe:	2010      	movs	r0, #16
 8000bc0:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000bc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000bc6:	f7ff bee9 	b.w	800099c <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000bca:	2020      	movs	r0, #32
 8000bcc:	2101      	movs	r1, #1
 8000bce:	f7ff fee5 	bl	800099c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8000bd2:	2020      	movs	r0, #32
 8000bd4:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000bd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8000bda:	f7ff bedf 	b.w	800099c <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000bde:	2040      	movs	r0, #64	; 0x40
 8000be0:	2101      	movs	r1, #1
 8000be2:	f7ff fedb 	bl	800099c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000be6:	2040      	movs	r0, #64	; 0x40
 8000be8:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000bea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000bee:	f7ff bed5 	b.w	800099c <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8000bf2:	2080      	movs	r0, #128	; 0x80
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	f7ff fed1 	bl	800099c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000bfa:	2080      	movs	r0, #128	; 0x80
 8000bfc:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000bfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000c02:	f7ff becb 	b.w	800099c <RCC_AHB1PeriphResetCmd>
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000c06:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	f7ff fec6 	bl	800099c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000c10:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c14:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000c16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000c1a:	f7ff bebf 	b.w	800099c <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 8000c1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c22:	2101      	movs	r1, #1
 8000c24:	f7ff feba 	bl	800099c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 8000c28:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c2c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000c2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 8000c32:	f7ff beb3 	b.w	800099c <RCC_AHB1PeriphResetCmd>
 8000c36:	bf00      	nop
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	40020400 	.word	0x40020400
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40020c00 	.word	0x40020c00
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40021400 	.word	0x40021400
 8000c50:	40021800 	.word	0x40021800
 8000c54:	40021c00 	.word	0x40021c00
 8000c58:	40022000 	.word	0x40022000
 8000c5c:	40022400 	.word	0x40022400
 8000c60:	40022800 	.word	0x40022800

08000c64 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000c64:	2200      	movs	r2, #0
 8000c66:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	680e      	ldr	r6, [r1, #0]
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000c6e:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000c70:	f04f 0803 	mov.w	r8, #3
 8000c74:	e004      	b.n	8000c80 <GPIO_Init+0x1c>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c76:	3301      	adds	r3, #1
 8000c78:	2b10      	cmp	r3, #16
 8000c7a:	f102 0202 	add.w	r2, r2, #2
 8000c7e:	d02e      	beq.n	8000cde <GPIO_Init+0x7a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000c80:	fa07 f403 	lsl.w	r4, r7, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000c84:	ea04 0506 	and.w	r5, r4, r6

    if (currentpin == pos)
 8000c88:	42a5      	cmp	r5, r4
 8000c8a:	d1f4      	bne.n	8000c76 <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000c8c:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000c90:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000c94:	fa08 f402 	lsl.w	r4, r8, r2
 8000c98:	43e4      	mvns	r4, r4
 8000c9a:	ea04 0909 	and.w	r9, r4, r9
 8000c9e:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ca2:	f8d0 9000 	ldr.w	r9, [r0]
 8000ca6:	fa0c fa02 	lsl.w	sl, ip, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000caa:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8000cae:	fa5f fc8c 	uxtb.w	ip, ip
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000cb2:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000cb6:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000cba:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000cbe:	d911      	bls.n	8000ce4 <GPIO_Init+0x80>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000cc0:	68c5      	ldr	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000cc2:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000cc6:	402c      	ands	r4, r5
 8000cc8:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000cca:	68c5      	ldr	r5, [r0, #12]
 8000ccc:	fa0c f402 	lsl.w	r4, ip, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000cd0:	3301      	adds	r3, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000cd2:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000cd4:	2b10      	cmp	r3, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000cd6:	60c4      	str	r4, [r0, #12]
 8000cd8:	f102 0202 	add.w	r2, r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000cdc:	d1d0      	bne.n	8000c80 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000cde:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8000ce2:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000ce4:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000ce8:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000cec:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000cf0:	ea04 0a0a 	and.w	sl, r4, sl
 8000cf4:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000cf8:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8000cfc:	fa09 f902 	lsl.w	r9, r9, r2
 8000d00:	ea49 090a 	orr.w	r9, r9, sl
 8000d04:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000d08:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8000d0c:	ea29 0505 	bic.w	r5, r9, r5
 8000d10:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000d12:	6845      	ldr	r5, [r0, #4]
 8000d14:	fa0c fc03 	lsl.w	ip, ip, r3
 8000d18:	fa1f fc8c 	uxth.w	ip, ip
 8000d1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d20:	6045      	str	r5, [r0, #4]
 8000d22:	e7cd      	b.n	8000cc0 <GPIO_Init+0x5c>

08000d24 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000d24:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d2a:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000d2c:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000d2e:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000d30:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000d32:	71c3      	strb	r3, [r0, #7]
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d38:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8000d3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d3e:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000d40:	9b01      	ldr	r3, [sp, #4]
 8000d42:	430b      	orrs	r3, r1
 8000d44:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000d46:	9b01      	ldr	r3, [sp, #4]
 8000d48:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000d4a:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000d4c:	9b01      	ldr	r3, [sp, #4]
 8000d4e:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000d50:	69c3      	ldr	r3, [r0, #28]
 8000d52:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000d54:	69c3      	ldr	r3, [r0, #28]
 8000d56:	9301      	str	r3, [sp, #4]
}
 8000d58:	b002      	add	sp, #8
 8000d5a:	4770      	bx	lr

08000d5c <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000d5c:	6903      	ldr	r3, [r0, #16]
 8000d5e:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000d60:	bf0c      	ite	eq
 8000d62:	2000      	moveq	r0, #0
 8000d64:	2001      	movne	r0, #1
 8000d66:	4770      	bx	lr

08000d68 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000d68:	6900      	ldr	r0, [r0, #16]
}
 8000d6a:	b280      	uxth	r0, r0
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000d70:	6943      	ldr	r3, [r0, #20]
 8000d72:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000d74:	bf0c      	ite	eq
 8000d76:	2000      	moveq	r0, #0
 8000d78:	2001      	movne	r0, #1
 8000d7a:	4770      	bx	lr

08000d7c <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8000d7c:	6940      	ldr	r0, [r0, #20]
}
 8000d7e:	b280      	uxth	r0, r0
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000d84:	8301      	strh	r1, [r0, #24]
 8000d86:	4770      	bx	lr

08000d88 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000d88:	8341      	strh	r1, [r0, #26]
 8000d8a:	4770      	bx	lr

08000d8c <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000d8c:	b90a      	cbnz	r2, 8000d92 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000d8e:	8341      	strh	r1, [r0, #26]
 8000d90:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000d92:	8301      	strh	r1, [r0, #24]
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8000d98:	6141      	str	r1, [r0, #20]
 8000d9a:	4770      	bx	lr

08000d9c <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000d9c:	6943      	ldr	r3, [r0, #20]
 8000d9e:	4059      	eors	r1, r3
 8000da0:	6141      	str	r1, [r0, #20]
 8000da2:	4770      	bx	lr

08000da4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000da4:	08cb      	lsrs	r3, r1, #3
 8000da6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000daa:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000dae:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000db0:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000db2:	6a04      	ldr	r4, [r0, #32]
 8000db4:	230f      	movs	r3, #15
 8000db6:	408b      	lsls	r3, r1
 8000db8:	ea24 0303 	bic.w	r3, r4, r3
 8000dbc:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000dbe:	6a03      	ldr	r3, [r0, #32]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 8000dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000dc4:	408a      	lsls	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000dc6:	4313      	orrs	r3, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000dc8:	6203      	str	r3, [r0, #32]
}
 8000dca:	4770      	bx	lr

08000dcc <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8000dcc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8000dce:	4b3a      	ldr	r3, [pc, #232]	; (8000eb8 <USART_DeInit+0xec>)
 8000dd0:	4298      	cmp	r0, r3
 8000dd2:	d021      	beq.n	8000e18 <USART_DeInit+0x4c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 8000dd4:	4b39      	ldr	r3, [pc, #228]	; (8000ebc <USART_DeInit+0xf0>)
 8000dd6:	4298      	cmp	r0, r3
 8000dd8:	d028      	beq.n	8000e2c <USART_DeInit+0x60>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 8000dda:	4b39      	ldr	r3, [pc, #228]	; (8000ec0 <USART_DeInit+0xf4>)
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	d031      	beq.n	8000e44 <USART_DeInit+0x78>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 8000de0:	4b38      	ldr	r3, [pc, #224]	; (8000ec4 <USART_DeInit+0xf8>)
 8000de2:	4298      	cmp	r0, r3
 8000de4:	d03a      	beq.n	8000e5c <USART_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 8000de6:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <USART_DeInit+0xfc>)
 8000de8:	4298      	cmp	r0, r3
 8000dea:	d043      	beq.n	8000e74 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }  
  else if (USARTx == USART6)
 8000dec:	4b37      	ldr	r3, [pc, #220]	; (8000ecc <USART_DeInit+0x100>)
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d04c      	beq.n	8000e8c <USART_DeInit+0xc0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
  }
  else if (USARTx == UART7)
 8000df2:	4b37      	ldr	r3, [pc, #220]	; (8000ed0 <USART_DeInit+0x104>)
 8000df4:	4298      	cmp	r0, r3
 8000df6:	d053      	beq.n	8000ea0 <USART_DeInit+0xd4>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
  }     
  else
  {
    if (USARTx == UART8)
 8000df8:	4b36      	ldr	r3, [pc, #216]	; (8000ed4 <USART_DeInit+0x108>)
 8000dfa:	4298      	cmp	r0, r3
 8000dfc:	d000      	beq.n	8000e00 <USART_DeInit+0x34>
 8000dfe:	bd08      	pop	{r3, pc}
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 8000e00:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000e04:	2101      	movs	r1, #1
 8000e06:	f7ff fded 	bl	80009e4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8000e0a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000e0e:	2100      	movs	r1, #0
    }
  }
}
 8000e10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == UART8)
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8000e14:	f7ff bde6 	b.w	80009e4 <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8000e18:	2010      	movs	r0, #16
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	f7ff fdee 	bl	80009fc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000e20:	2010      	movs	r0, #16
 8000e22:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000e24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000e28:	f7ff bde8 	b.w	80009fc <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8000e2c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e30:	2101      	movs	r1, #1
 8000e32:	f7ff fdd7 	bl	80009e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000e36:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e3a:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000e3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000e40:	f7ff bdd0 	b.w	80009e4 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8000e44:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000e48:	2101      	movs	r1, #1
 8000e4a:	f7ff fdcb 	bl	80009e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000e4e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000e52:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000e54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000e58:	f7ff bdc4 	b.w	80009e4 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8000e5c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000e60:	2101      	movs	r1, #1
 8000e62:	f7ff fdbf 	bl	80009e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000e66:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000e6a:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000e6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000e70:	f7ff bdb8 	b.w	80009e4 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8000e74:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000e78:	2101      	movs	r1, #1
 8000e7a:	f7ff fdb3 	bl	80009e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000e7e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000e82:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000e84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000e88:	f7ff bdac 	b.w	80009e4 <RCC_APB1PeriphResetCmd>
  }  
  else if (USARTx == USART6)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8000e8c:	2020      	movs	r0, #32
 8000e8e:	2101      	movs	r1, #1
 8000e90:	f7ff fdb4 	bl	80009fc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8000e94:	2020      	movs	r0, #32
 8000e96:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000e98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }  
  else if (USARTx == USART6)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8000e9c:	f7ff bdae 	b.w	80009fc <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == UART7)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 8000ea0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	f7ff fd9d 	bl	80009e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8000eaa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000eae:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000eb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
  }
  else if (USARTx == UART7)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8000eb4:	f7ff bd96 	b.w	80009e4 <RCC_APB1PeriphResetCmd>
 8000eb8:	40011000 	.word	0x40011000
 8000ebc:	40004400 	.word	0x40004400
 8000ec0:	40004800 	.word	0x40004800
 8000ec4:	40004c00 	.word	0x40004c00
 8000ec8:	40005000 	.word	0x40005000
 8000ecc:	40011400 	.word	0x40011400
 8000ed0:	40007800 	.word	0x40007800
 8000ed4:	40007c00 	.word	0x40007c00

08000ed8 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eda:	460d      	mov	r5, r1
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000edc:	8a01      	ldrh	r1, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000ede:	88ef      	ldrh	r7, [r5, #6]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000ee0:	892e      	ldrh	r6, [r5, #8]
 8000ee2:	88ab      	ldrh	r3, [r5, #4]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000ee4:	89aa      	ldrh	r2, [r5, #12]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000ee6:	b289      	uxth	r1, r1
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000ee8:	4604      	mov	r4, r0

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000eea:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000eee:	4339      	orrs	r1, r7

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000ef0:	8968      	ldrh	r0, [r5, #10]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000ef2:	8221      	strh	r1, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000ef4:	89a1      	ldrh	r1, [r4, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000ef6:	4333      	orrs	r3, r6
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000ef8:	b289      	uxth	r1, r1

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000efa:	4303      	orrs	r3, r0

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000efc:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8000f00:	f021 010c 	bic.w	r1, r1, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000f04:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000f06:	430b      	orrs	r3, r1
 8000f08:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000f0a:	8aa3      	ldrh	r3, [r4, #20]
 8000f0c:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000f12:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000f14:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000f16:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000f18:	4668      	mov	r0, sp
 8000f1a:	f7ff fc4d 	bl	80007b8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <USART_Init+0xbc>)
 8000f20:	429c      	cmp	r4, r3
 8000f22:	d029      	beq.n	8000f78 <USART_Init+0xa0>
 8000f24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f28:	429c      	cmp	r4, r3
 8000f2a:	d025      	beq.n	8000f78 <USART_Init+0xa0>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000f2c:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000f2e:	89a2      	ldrh	r2, [r4, #12]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000f30:	6829      	ldr	r1, [r5, #0]

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000f32:	89a0      	ldrh	r0, [r4, #12]
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000f34:	b212      	sxth	r2, r2
 8000f36:	2a00      	cmp	r2, #0
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000f38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000f3c:	bfb4      	ite	lt
 8000f3e:	0049      	lsllt	r1, r1, #1
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000f40:	0089      	lslge	r1, r1, #2
 8000f42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000f46:	fbb3 f2f1 	udiv	r2, r3, r1
  }
  tmpreg = (integerdivider / 100) << 4;
 8000f4a:	4913      	ldr	r1, [pc, #76]	; (8000f98 <USART_Init+0xc0>)

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000f4c:	b200      	sxth	r0, r0
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8000f4e:	fba1 5302 	umull	r5, r3, r1, r2
 8000f52:	095b      	lsrs	r3, r3, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000f54:	2564      	movs	r5, #100	; 0x64

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000f56:	2800      	cmp	r0, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000f58:	fb03 2215 	mls	r2, r3, r5, r2
 8000f5c:	ea4f 1303 	mov.w	r3, r3, lsl #4

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000f60:	db0c      	blt.n	8000f7c <USART_Init+0xa4>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	3232      	adds	r2, #50	; 0x32
 8000f66:	fba1 5102 	umull	r5, r1, r1, r2
 8000f6a:	f3c1 1143 	ubfx	r1, r1, #5, #4
 8000f6e:	430b      	orrs	r3, r1
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	8123      	strh	r3, [r4, #8]
}
 8000f74:	b005      	add	sp, #20
 8000f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000f78:	9b03      	ldr	r3, [sp, #12]
 8000f7a:	e7d8      	b.n	8000f2e <USART_Init+0x56>
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000f7c:	00d2      	lsls	r2, r2, #3
 8000f7e:	3232      	adds	r2, #50	; 0x32
 8000f80:	fba1 0102 	umull	r0, r1, r1, r2
 8000f84:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8000f88:	430b      	orrs	r3, r1
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	8123      	strh	r3, [r4, #8]
}
 8000f8e:	b005      	add	sp, #20
 8000f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40011000 	.word	0x40011000
 8000f98:	51eb851f 	.word	0x51eb851f

08000f9c <USART_StructInit>:
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000f9c:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000f9e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000fa2:	220c      	movs	r2, #12
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000fa4:	6001      	str	r1, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000fa6:	8142      	strh	r2, [r0, #10]
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000fa8:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8000faa:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8000fac:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8000fae:	8183      	strh	r3, [r0, #12]
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8000fb4:	b430      	push	{r4, r5}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8000fb6:	880a      	ldrh	r2, [r1, #0]
 8000fb8:	884d      	ldrh	r5, [r1, #2]
 8000fba:	888c      	ldrh	r4, [r1, #4]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000fbc:	8a03      	ldrh	r3, [r0, #16]
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8000fbe:	88c9      	ldrh	r1, [r1, #6]
 8000fc0:	432a      	orrs	r2, r5
 8000fc2:	4322      	orrs	r2, r4
 8000fc4:	430a      	orrs	r2, r1
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000fc6:	b29b      	uxth	r3, r3
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8000fc8:	b292      	uxth	r2, r2
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8000fca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	8203      	strh	r3, [r0, #16]
}
 8000fd2:	bc30      	pop	{r4, r5}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8000fdc:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8000fde:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8000fe0:	80c3      	strh	r3, [r0, #6]
 8000fe2:	4770      	bx	lr

08000fe4 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000fe4:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000fe6:	b929      	cbnz	r1, 8000ff4 <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000fe8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000fec:	041b      	lsls	r3, r3, #16
 8000fee:	0c1b      	lsrs	r3, r3, #16
 8000ff0:	8183      	strh	r3, [r0, #12]
 8000ff2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ffa:	8183      	strh	r3, [r0, #12]
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8001000:	8b03      	ldrh	r3, [r0, #24]
 8001002:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001006:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8001008:	8b03      	ldrh	r3, [r0, #24]
 800100a:	b29b      	uxth	r3, r3
 800100c:	4319      	orrs	r1, r3
 800100e:	8301      	strh	r1, [r0, #24]
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8001014:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001016:	b919      	cbnz	r1, 8001020 <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8001018:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800101c:	8183      	strh	r3, [r0, #12]
 800101e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8001020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001028:	b29b      	uxth	r3, r3
 800102a:	8183      	strh	r3, [r0, #12]
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8001030:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001032:	b929      	cbnz	r1, 8001040 <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8001034:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001038:	041b      	lsls	r3, r3, #16
 800103a:	0c1b      	lsrs	r3, r3, #16
 800103c:	8283      	strh	r3, [r0, #20]
 800103e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8001040:	b29b      	uxth	r3, r3
 8001042:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001046:	8283      	strh	r3, [r0, #20]
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800104c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001050:	8081      	strh	r1, [r0, #4]
 8001052:	4770      	bx	lr

08001054 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001054:	8880      	ldrh	r0, [r0, #4]
}
 8001056:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800105a:	4770      	bx	lr

0800105c <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 800105c:	8a03      	ldrh	r3, [r0, #16]
 800105e:	f023 030f 	bic.w	r3, r3, #15
 8001062:	041b      	lsls	r3, r3, #16
 8001064:	0c1b      	lsrs	r3, r3, #16
 8001066:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8001068:	8a03      	ldrh	r3, [r0, #16]
 800106a:	b29b      	uxth	r3, r3
 800106c:	4319      	orrs	r1, r3
 800106e:	8201      	strh	r1, [r0, #16]
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8001074:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8001076:	b929      	cbnz	r1, 8001084 <USART_ReceiverWakeUpCmd+0x10>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8001078:	f023 0302 	bic.w	r3, r3, #2
 800107c:	041b      	lsls	r3, r3, #16
 800107e:	0c1b      	lsrs	r3, r3, #16
 8001080:	8183      	strh	r3, [r0, #12]
 8001082:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8001084:	b29b      	uxth	r3, r3
 8001086:	f043 0302 	orr.w	r3, r3, #2
 800108a:	8183      	strh	r3, [r0, #12]
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8001090:	8983      	ldrh	r3, [r0, #12]
 8001092:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001096:	041b      	lsls	r3, r3, #16
 8001098:	0c1b      	lsrs	r3, r3, #16
 800109a:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 800109c:	8983      	ldrh	r3, [r0, #12]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4319      	orrs	r1, r3
 80010a2:	8181      	strh	r1, [r0, #12]
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 80010a8:	8a03      	ldrh	r3, [r0, #16]
 80010aa:	f023 0320 	bic.w	r3, r3, #32
 80010ae:	041b      	lsls	r3, r3, #16
 80010b0:	0c1b      	lsrs	r3, r3, #16
 80010b2:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 80010b4:	8a03      	ldrh	r3, [r0, #16]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	4319      	orrs	r1, r3
 80010ba:	8201      	strh	r1, [r0, #16]
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 80010c0:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80010c2:	b929      	cbnz	r1, 80010d0 <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 80010c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010c8:	041b      	lsls	r3, r3, #16
 80010ca:	0c1b      	lsrs	r3, r3, #16
 80010cc:	8203      	strh	r3, [r0, #16]
 80010ce:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d6:	8203      	strh	r3, [r0, #16]
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 80010dc:	8983      	ldrh	r3, [r0, #12]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	8183      	strh	r3, [r0, #12]
 80010e6:	4770      	bx	lr

080010e8 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80010e8:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80010ea:	b929      	cbnz	r1, 80010f8 <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 80010ec:	f023 0308 	bic.w	r3, r3, #8
 80010f0:	041b      	lsls	r3, r3, #16
 80010f2:	0c1b      	lsrs	r3, r3, #16
 80010f4:	8283      	strh	r3, [r0, #20]
 80010f6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	f043 0308 	orr.w	r3, r3, #8
 80010fe:	8283      	strh	r3, [r0, #20]
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop

08001104 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8001104:	8b03      	ldrh	r3, [r0, #24]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800110a:	8b03      	ldrh	r3, [r0, #24]
 800110c:	b29b      	uxth	r3, r3
 800110e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8001112:	8301      	strh	r1, [r0, #24]
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8001118:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800111a:	b929      	cbnz	r1, 8001128 <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 800111c:	f023 0320 	bic.w	r3, r3, #32
 8001120:	041b      	lsls	r3, r3, #16
 8001122:	0c1b      	lsrs	r3, r3, #16
 8001124:	8283      	strh	r3, [r0, #20]
 8001126:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8001128:	b29b      	uxth	r3, r3
 800112a:	f043 0320 	orr.w	r3, r3, #32
 800112e:	8283      	strh	r3, [r0, #20]
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8001134:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001136:	b929      	cbnz	r1, 8001144 <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8001138:	f023 0310 	bic.w	r3, r3, #16
 800113c:	041b      	lsls	r3, r3, #16
 800113e:	0c1b      	lsrs	r3, r3, #16
 8001140:	8283      	strh	r3, [r0, #20]
 8001142:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8001144:	b29b      	uxth	r3, r3
 8001146:	f043 0310 	orr.w	r3, r3, #16
 800114a:	8283      	strh	r3, [r0, #20]
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8001150:	8a83      	ldrh	r3, [r0, #20]
 8001152:	f023 0304 	bic.w	r3, r3, #4
 8001156:	041b      	lsls	r3, r3, #16
 8001158:	0c1b      	lsrs	r3, r3, #16
 800115a:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 800115c:	8a83      	ldrh	r3, [r0, #20]
 800115e:	b29b      	uxth	r3, r3
 8001160:	4319      	orrs	r1, r3
 8001162:	8281      	strh	r1, [r0, #20]
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop

08001168 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8001168:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800116a:	b929      	cbnz	r1, 8001178 <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 800116c:	f023 0302 	bic.w	r3, r3, #2
 8001170:	041b      	lsls	r3, r3, #16
 8001172:	0c1b      	lsrs	r3, r3, #16
 8001174:	8283      	strh	r3, [r0, #20]
 8001176:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8001178:	b29b      	uxth	r3, r3
 800117a:	f043 0302 	orr.w	r3, r3, #2
 800117e:	8283      	strh	r3, [r0, #20]
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001184:	8a83      	ldrh	r3, [r0, #20]
 8001186:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8001188:	b91a      	cbnz	r2, 8001192 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800118a:	ea23 0101 	bic.w	r1, r3, r1
 800118e:	8281      	strh	r1, [r0, #20]
 8001190:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001192:	4319      	orrs	r1, r3
 8001194:	8281      	strh	r1, [r0, #20]
 8001196:	4770      	bx	lr

08001198 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8001198:	f001 031f 	and.w	r3, r1, #31
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800119c:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800119e:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80011a2:	2401      	movs	r4, #1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80011a4:	42a1      	cmp	r1, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80011a6:	fa04 f303 	lsl.w	r3, r4, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80011aa:	d010      	beq.n	80011ce <USART_ITConfig+0x36>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80011ac:	2902      	cmp	r1, #2
  {
    usartxbase += 0x10;
 80011ae:	bf0c      	ite	eq
 80011b0:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80011b2:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80011b4:	6804      	ldr	r4, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 80011b6:	b92a      	cbnz	r2, 80011c4 <USART_ITConfig+0x2c>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80011b8:	ea24 0303 	bic.w	r3, r4, r3
 80011bc:	6003      	str	r3, [r0, #0]
  }
}
 80011be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011c2:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80011c4:	4323      	orrs	r3, r4
 80011c6:	6003      	str	r3, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80011c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011cc:	4770      	bx	lr
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 80011ce:	300c      	adds	r0, #12
 80011d0:	e7f0      	b.n	80011b4 <USART_ITConfig+0x1c>
 80011d2:	bf00      	nop

080011d4 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80011d4:	8803      	ldrh	r3, [r0, #0]
 80011d6:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80011d8:	bf0c      	ite	eq
 80011da:	2000      	moveq	r0, #0
 80011dc:	2001      	movne	r0, #1
 80011de:	4770      	bx	lr

080011e0 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 80011e0:	43c9      	mvns	r1, r1
 80011e2:	b289      	uxth	r1, r1
 80011e4:	8001      	strh	r1, [r0, #0]
 80011e6:	4770      	bx	lr

080011e8 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80011e8:	b410      	push	{r4}
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80011ea:	f3c1 1342 	ubfx	r3, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 80011ee:	2401      	movs	r4, #1
 80011f0:	f001 021f 	and.w	r2, r1, #31
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80011f4:	42a3      	cmp	r3, r4
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 80011f6:	fa04 f202 	lsl.w	r2, r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80011fa:	d017      	beq.n	800122c <USART_GetITStatus+0x44>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80011fc:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 80011fe:	bf0c      	ite	eq
 8001200:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001202:	8a83      	ldrhne	r3, [r0, #20]
 8001204:	b29b      	uxth	r3, r3
 8001206:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8001208:	8802      	ldrh	r2, [r0, #0]
 800120a:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800120c:	b153      	cbz	r3, 8001224 <USART_GetITStatus+0x3c>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 800120e:	0a09      	lsrs	r1, r1, #8
 8001210:	2301      	movs	r3, #1
 8001212:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001216:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 8001218:	bf0c      	ite	eq
 800121a:	2000      	moveq	r0, #0
 800121c:	2001      	movne	r0, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 800121e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001222:	4770      	bx	lr
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8001224:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8001226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800122a:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 800122c:	8983      	ldrh	r3, [r0, #12]
 800122e:	b29b      	uxth	r3, r3
 8001230:	4013      	ands	r3, r2
 8001232:	e7e9      	b.n	8001208 <USART_GetITStatus+0x20>

08001234 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001234:	0a09      	lsrs	r1, r1, #8
 8001236:	2301      	movs	r3, #1
 8001238:	fa03 f101 	lsl.w	r1, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 800123c:	43c9      	mvns	r1, r1
 800123e:	b289      	uxth	r1, r1
 8001240:	8001      	strh	r1, [r0, #0]
 8001242:	4770      	bx	lr

08001244 <main>:
  while ((msTicks - curTicks) < dlyTicks);
}

void setSysTick(){
	// ---------- SysTick timer (1ms) -------- //
	if (SysTick_Config(SystemCoreClock / 1000)) {
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <main+0x3c>)
		*str++;
	}
}


int main(void) {
 8001246:	b508      	push	{r3, lr}
  while ((msTicks - curTicks) < dlyTicks);
}

void setSysTick(){
	// ---------- SysTick timer (1ms) -------- //
	if (SysTick_Config(SystemCoreClock / 1000)) {
 8001248:	6812      	ldr	r2, [r2, #0]
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <main+0x40>)
 800124c:	fba3 1202 	umull	r1, r2, r3, r2
 8001250:	0992      	lsrs	r2, r2, #6
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8001252:	3a01      	subs	r2, #1
 8001254:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8001258:	d210      	bcs.n	800127c <main+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <main+0x44>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <main+0x48>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800125e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001260:	2100      	movs	r1, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001262:	2207      	movs	r2, #7
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001264:	24f0      	movs	r4, #240	; 0xf0
 8001266:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800126a:	6099      	str	r1, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126c:	601a      	str	r2, [r3, #0]
}


int main(void) {
	setSysTick();
	setup_Periph();
 800126e:	f7fe ffb5 	bl	80001dc <setup_Periph>

	USART_puts(USART2, "Hello World!\n");
 8001272:	4807      	ldr	r0, [pc, #28]	; (8001290 <main+0x4c>)
 8001274:	4907      	ldr	r1, [pc, #28]	; (8001294 <main+0x50>)
 8001276:	f7ff f80b 	bl	8000290 <USART_puts>
 800127a:	e7fe      	b.n	800127a <main+0x36>
 800127c:	e7fe      	b.n	800127c <main+0x38>
 800127e:	bf00      	nop
 8001280:	20000010 	.word	0x20000010
 8001284:	10624dd3 	.word	0x10624dd3
 8001288:	e000e010 	.word	0xe000e010
 800128c:	e000ed00 	.word	0xe000ed00
 8001290:	40004400 	.word	0x40004400
 8001294:	08001298 	.word	0x08001298
 8001298:	6c6c6548 	.word	0x6c6c6548
 800129c:	6f57206f 	.word	0x6f57206f
 80012a0:	21646c72 	.word	0x21646c72
 80012a4:	0000000a 	.word	0x0000000a
